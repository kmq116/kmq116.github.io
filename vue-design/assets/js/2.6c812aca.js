(window.webpackJsonp=window.webpackJsonp||[]).push([[2],Array(165).concat([function(t,s,a){t.exports=a.p+"assets/img/diff-react-2.e6cef98d.png"},function(t,s,a){t.exports=a.p+"assets/img/patch-children-3.06453ea2.png"},,function(t,s,a){t.exports=a.p+"assets/img/diff-react-5.d12b2ed9.png"},function(t,s,a){t.exports=a.p+"assets/img/diff-vue2-2.65a1bd51.png"},function(t,s,a){t.exports=a.p+"assets/img/diff12.566f24a9.png"},,,,,,,function(t,s,a){t.exports=a.p+"assets/img/diff-1.284cea98.png"},function(t,s,a){t.exports=a.p+"assets/img/diff-2.8ce72d46.png"},function(t,s,a){t.exports=a.p+"assets/img/diff-3.1d1958ef.png"},function(t,s,a){t.exports=a.p+"assets/img/diff-4.0adb55a1.png"},function(t,s,a){t.exports=a.p+"assets/img/diff-5.ba7c26fa.png"},function(t,s,a){t.exports=a.p+"assets/img/diff-6.1e914878.png"},function(t,s,a){t.exports=a.p+"assets/img/diff-react-1.7b07877f.png"},function(t,s,a){t.exports=a.p+"assets/img/diff-react-3.dbc9ff62.png"},function(t,s,a){t.exports=a.p+"assets/img/diff-react-4.7443f559.png"},function(t,s,a){t.exports=a.p+"assets/img/diff-react-6.4ad1a4c1.png"},function(t,s,a){t.exports=a.p+"assets/img/diff-vue2-1.216b174f.png"},function(t,s,a){t.exports=a.p+"assets/img/diff-vue2-3.933b8708.png"},function(t,s,a){t.exports=a.p+"assets/img/diff-vue2-4.b1c3cc2a.png"},function(t,s,a){t.exports=a.p+"assets/img/diff-vue2-5.0c42d714.png"},function(t,s,a){t.exports=a.p+"assets/img/diff-vue2-6.80733f9c.png"},function(t,s,a){t.exports=a.p+"assets/img/diff-vue2-7.6474272b.png"},function(t,s,a){t.exports=a.p+"assets/img/diff-vue2-8.562f3899.png"},function(t,s,a){t.exports=a.p+"assets/img/diff-vue2-9.532508e2.png"},function(t,s,a){t.exports=a.p+"assets/img/diff-vue2-10.2a5c7497.png"},function(t,s,a){t.exports=a.p+"assets/img/diff-vue2-11.dfc7860f.png"},function(t,s,a){t.exports=a.p+"assets/img/diff-vue2-12.06bed8e2.png"},function(t,s,a){t.exports=a.p+"assets/img/diff-vue2-13.b88d7abb.png"},function(t,s,a){t.exports=a.p+"assets/img/diff-vue2-14.ca021a85.png"},function(t,s,a){t.exports=a.p+"assets/img/diff-vue2-15.08ec9ab8.png"},function(t,s,a){t.exports=a.p+"assets/img/diff-vue2-16.ce5c6d2b.png"},function(t,s,a){t.exports=a.p+"assets/img/diff-vue2-17.b4d9f7a4.png"},function(t,s,a){t.exports=a.p+"assets/img/diff-vue2-18.cc8a1fae.png"},function(t,s,a){t.exports=a.p+"assets/img/diff-vue2-19.1d4087f6.png"},function(t,s,a){t.exports=a.p+"assets/img/diff-vue2-20.a80cbba0.png"},function(t,s,a){t.exports=a.p+"assets/img/diff-vue2-21.f4b83431.png"},function(t,s,a){t.exports=a.p+"assets/img/diff-vue2-22.cb427ed4.png"},function(t,s,a){t.exports=a.p+"assets/img/diff-benchmark.6d4927ac.png"},function(t,s,a){t.exports=a.p+"assets/img/diff1.7cd0d7d1.png"},function(t,s,a){t.exports=a.p+"assets/img/diff2.469b3f9b.png"},function(t,s,a){t.exports=a.p+"assets/img/diff3.58e3c241.png"},function(t,s,a){t.exports=a.p+"assets/img/diff4.b6517d9f.png"},function(t,s,a){t.exports=a.p+"assets/img/diff5.edd80c32.png"},function(t,s,a){t.exports=a.p+"assets/img/diff6.a882df3d.png"},function(t,s,a){t.exports=a.p+"assets/img/diff7.df9450ee.png"},function(t,s,a){t.exports=a.p+"assets/img/diff8.f618edee.png"},function(t,s,a){t.exports=a.p+"assets/img/diff9.c4746f37.png"},function(t,s,a){t.exports=a.p+"assets/img/diff10.f2a5a3e6.png"},function(t,s,a){t.exports=a.p+"assets/img/diff11.48afbeb3.png"},function(t,s,a){t.exports=a.p+"assets/img/diff14.7c7a1bfc.png"},function(t,s,a){t.exports=a.p+"assets/img/diff15.087a1726.png"},function(t,s,a){t.exports=a.p+"assets/img/diff16.3bb06229.png"},function(t,s,a){t.exports=a.p+"assets/img/diff17.21e18aa5.png"},function(t,s,a){t.exports=a.p+"assets/img/diff18.6f45cb0f.png"},function(t,s,a){t.exports=a.p+"assets/img/lis1.a175cde6.png"},function(t,s,a){t.exports=a.p+"assets/img/lis2.af71d744.png"},function(t,s,a){t.exports=a.p+"assets/img/lis3.78ad38df.png"},function(t,s,a){t.exports=a.p+"assets/img/lis4.aa68a822.png"},function(t,s,a){t.exports=a.p+"assets/img/lis5.6891d76d.png"},function(t,s,a){t.exports=a.p+"assets/img/lis6.188e964d.png"},function(t,s,a){t.exports=a.p+"assets/img/lis7.4e6c0065.png"},function(t,s,a){t.exports=a.p+"assets/img/lis8.0fdc2268.png"},function(t,s,a){t.exports=a.p+"assets/img/lis9.d98aa048.png"},function(t,s,a){t.exports=a.p+"assets/img/lis10.f667c339.png"},function(t,s,a){t.exports=a.p+"assets/img/lis11.4c2ca168.png"},,,,,,,,,,,,,,,,,,,,,,,,,,,function(t,s,a){"use strict";a.r(s);var n=[function(){var t=this.$createElement,s=this._self._c||t;return s("h1",{attrs:{id:"渲染器的核心-diff-算法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#渲染器的核心-diff-算法"}},[this._v("#")]),this._v(" 渲染器的核心 Diff 算法")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"减小dom操作的性能开销"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#减小dom操作的性能开销"}},[this._v("#")]),this._v(" 减小DOM操作的性能开销")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("上一章我们讨论了渲染器是如何更新各种类型的 "),a("code",[t._v("VNode")]),t._v(" 的，实际上，上一章所讲解的内容归属于完整的 "),a("code",[t._v("Diff")]),t._v(" 算法之内，但并不包含核心的 "),a("code",[t._v("Diff")]),t._v(" 算法。那什么才是核心的 "),a("code",[t._v("Diff")]),t._v(" 算法呢？看下图：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("img",{attrs:{src:a(166),alt:""}})])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("我们曾在上一章中讲解子节点更新的时候见到过这张图，当时我们提到"),s("strong",[this._v("只有当新旧子节点的类型都是多个子节点时，核心 "),s("code",[this._v("Diff")]),this._v(" 算法才派得上用场")]),this._v("，并且当时我们采用了一种仅能实现目标但并不完美的算法："),s("strong",[this._v("遍历旧的子节点，将其全部移除；再遍历新的子节点，将其全部添加")]),this._v("，如下高亮代码所示：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-js extra-class"},[a("div",{staticClass:"highlight-lines"},[a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("br"),a("br"),a("br"),a("br"),a("br"),a("br")]),a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("patchChildren")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("prevChildFlags"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  nextChildFlags"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  prevChildren"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  nextChildren"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  container")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("switch")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("prevChildFlags"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 旧的 children 中有多个子节点")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("switch")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nextChildFlags"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" ChildrenFlags"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("SINGLE_VNODE")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n          "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" ChildrenFlags"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NO_CHILDREN")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n          "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n          "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 新的 children 中有多个子节点")]),t._v("\n          "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 遍历旧的子节点，将其全部移除")]),t._v("\n          "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" prevChildren"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            container"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("removeChild")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("prevChildren"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("el"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n          "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n          "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 遍历新的子节点，将其全部添加")]),t._v("\n          "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" nextChildren"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("mount")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nextChildren"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" container"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n          "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n          "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("为了便于表述，我们把这个算法称为："),s("strong",[this._v("简单 Diff 算法")]),this._v("。"),s("strong",[this._v("简单 Diff 算法")]),this._v("虽然能够达到目的，但并非最佳处理方式。我们经常会遇到可排序的列表，假设我们有一个由 "),s("code",[this._v("li")]),this._v(" 标签组成的列表：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-html extra-class"},[a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("ul")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("li")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("1"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("li")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("li")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("2"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("li")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("li")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("3"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("li")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("ul")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("列表中的 "),a("code",[t._v("li")]),t._v(" 标签是 "),a("code",[t._v("ul")]),t._v(" 标签的子节点，我们可以使用下面的数组来表示 "),a("code",[t._v("ul")]),t._v(" 标签的 "),a("code",[t._v("children")]),t._v("：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("h")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'li'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("h")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'li'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("h")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'li'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("h")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'li'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("h")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'li'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("h")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'li'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("新的列表和旧的列表构成了新旧 "),s("code",[this._v("children")]),this._v("，当我们使用"),s("strong",[this._v("简单 Diff 算法")]),this._v("更新这两个列表时，其操作行为可以用下图表示：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("在这张图中我们使用圆形表示真实 DOM 元素，用菱形表示 "),a("code",[t._v("VNode")]),t._v("，旧的 "),a("code",[t._v("VNode")]),t._v(" 保存着对真实 DOM 的引用(即 "),a("code",[t._v("vnode.el")]),t._v(" 属性)，新的 "),a("code",[t._v("VNode")]),t._v(" 是不存在对真实 DOM 的引用的。上图描述了"),a("strong",[t._v("简单 Diff 算法")]),t._v("的操作行为，首先遍历旧的 "),a("code",[t._v("VNode")]),t._v("，通过旧 "),a("code",[t._v("VNode")]),t._v(" 对真实 DOM 的引用取得真实 DOM，即可将已渲染的 DOM 移除。接着遍历新的 "),a("code",[t._v("VNode")]),t._v(" 并将其全部添加到页面中。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("在这个过程中我们能够注意到：更新前后的真实 DOM 元素都是 "),a("code",[t._v("li")]),t._v(" 标签。那么可不可以复用 "),a("code",[t._v("li")]),t._v(" 标签呢？这样就能减少“移除”和“新建” DOM 元素带来的性能开销，实际上是可以的，我们在讲解 "),a("code",[t._v("pathcElement")]),t._v(" 函数时了解到，当新旧 "),a("code",[t._v("VNode")]),t._v(" 所描述的是相同标签时，那么这两个 "),a("code",[t._v("VNode")]),t._v(" 之间的差异就仅存在于 "),a("code",[t._v("VNodeData")]),t._v(" 和 "),a("code",[t._v("children")]),t._v(" 上，所以我们完全可以通过遍历新旧 "),a("code",[t._v("VNode")]),t._v("，并一一比对它们，这样对于任何一个 DOM 元素来说，由于它们都是相同的标签，所以更新的过程是不会“移除”和“新建”任何 DOM 元素的，而是复用已有 DOM 元素，需要更新的只有 "),a("code",[t._v("VNodeData")]),t._v(" 和 "),a("code",[t._v("children")]),t._v("。优化后的更新操作可以用下图表示：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-js extra-class"},[a("div",{staticClass:"highlight-lines"},[a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("br"),a("br"),a("br"),a("br"),a("br"),a("br")]),a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("patchChildren")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("prevChildFlags"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  nextChildFlags"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  prevChildren"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  nextChildren"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  container")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("switch")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("prevChildFlags"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 旧的 children 中有多个子节点")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("switch")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nextChildFlags"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" ChildrenFlags"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("SINGLE_VNODE")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n          "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" ChildrenFlags"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NO_CHILDREN")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n          "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n          "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" prevChildren"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("patch")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("prevChildren"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" nextChildren"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" container"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n          "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n          "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("通过遍历旧的 "),a("code",[t._v("children")]),t._v("，将新旧 "),a("code",[t._v("children")]),t._v(" 中相同位置的节点拿出来作为一对“新旧 "),a("code",[t._v("VNode")]),t._v("”，并调用 "),a("code",[t._v("patch")]),t._v(" 函数更新之。由于新旧列表的标签相同，所以这种更新方案较之前相比，省去了“移除”和“新建” DOM 元素的性能开销。而且从实现上看，代码也较之前少了一些，真可谓一举两得。但不要高兴的太早，细心的同学可能已经发现问题所在了，如上代码中我们遍历的是旧的 "),a("code",[t._v("children")]),t._v("，如果新旧 "),a("code",[t._v("children")]),t._v(" 的长度相同的话，则这段代码可以正常工作，但是一旦新旧 "),a("code",[t._v("children")]),t._v(" 的长度不同，这段代码就不能正常工作了，如下图所示：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("当新的 "),a("code",[t._v("children")]),t._v(" 比旧的 "),a("code",[t._v("children")]),t._v(" 的长度要长时，多出来的子节点是没办法应用 "),a("code",[t._v("patch")]),t._v(" 函数的，此时我们应该把多出来的子节点作为新的节点添加上去。类似的，如果新的 "),a("code",[t._v("children")]),t._v(" 比旧的 "),a("code",[t._v("children")]),t._v(" 的长度要短时，我们应该把旧的 "),a("code",[t._v("children")]),t._v(" 中多出来的子节点移除，如下图所示：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("通过分析我们得出一个规律，我们不应该总是遍历旧的 "),a("code",[t._v("children")]),t._v("，而是应该遍历新旧 "),a("code",[t._v("children")]),t._v(" 中长度较短的那一个，这样我们能够做到尽可能多的应用 "),a("code",[t._v("patch")]),t._v(" 函数进行更新，然后再对比新旧 "),a("code",[t._v("children")]),t._v(" 的长度，如果新的 "),a("code",[t._v("children")]),t._v(" 更长，则说明有新的节点需要添加，否则说明有旧的节点需要移除。最终我们得到如下实现：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-js extra-class"},[a("div",{staticClass:"highlight-lines"},[a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("br"),a("br"),a("br"),a("br"),a("br"),a("br")]),a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("patchChildren")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("prevChildFlags"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  nextChildFlags"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  prevChildren"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  nextChildren"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  container")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("switch")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("prevChildFlags"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 旧的 children 中有多个子节点")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("switch")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nextChildFlags"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" ChildrenFlags"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("SINGLE_VNODE")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n          "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" ChildrenFlags"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NO_CHILDREN")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n          "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n          "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 新的 children 中有多个子节点")]),t._v("\n          "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 获取公共长度，取新旧 children 长度较小的那一个")]),t._v("\n          "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" prevLen "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" prevChildren"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length\n          "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" nextLen "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" nextChildren"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length\n          "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" commonLength "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" prevLen "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" nextLen "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" nextLen "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" prevLen\n          "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" commonLength"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("patch")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("prevChildren"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" nextChildren"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" container"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n          "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n          "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果 nextLen > prevLen，将多出来的元素添加")]),t._v("\n          "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nextLen "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" prevLen"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" commonLength"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" nextLen"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n              "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("mount")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nextChildren"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" container"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n          "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("prevLen "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" nextLen"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果 prevLen > nextLen，将多出来的元素移除")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" commonLength"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" prevLen"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n              container"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("removeChild")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("prevChildren"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("el"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n          "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n          "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("实际上，这个算法就是在没有 "),s("code",[this._v("key")]),this._v(" 时所采用的算法，该算法是存在优化空间的，下面我们将分析如何进一步优化。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"尽可能的复用-dom-元素"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#尽可能的复用-dom-元素"}},[this._v("#")]),this._v(" 尽可能的复用 DOM 元素")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"key-的作用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#key-的作用"}},[this._v("#")]),this._v(" key 的作用")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("在上一小节中，我们通过减少 DOM 操作的次数使得更新的性能得到了提升，但它仍然存在可优化的空间，要明白如何优化，那首先我们需要知道问题出在哪里。还是拿上一节的例子来说，假设旧的 "),s("code",[this._v("children")]),this._v(" 如下：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("h")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'li'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("h")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'li'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("h")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'li'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("新的 "),s("code",[this._v("children")]),this._v(" 如下：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("h")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'li'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("h")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'li'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("h")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'li'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("我们来看一下，如果使用前面讲解的 "),a("code",[t._v("Diff")]),t._v(" 算法来更新这对新旧 "),a("code",[t._v("children")]),t._v(" 的话，会进行哪些操作：首先，旧 "),a("code",[t._v("children")]),t._v(" 的第一个节点和新 "),a("code",[t._v("children")]),t._v(" 的第一个节点进行比对("),a("code",[t._v("patch")]),t._v(")，即：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("h")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'li'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// vs")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("h")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'li'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[a("code",[t._v("patch")]),t._v(" 函数知道它们是相同的标签，所以只会更新 "),a("code",[t._v("VNodeData")]),t._v(" 和子节点，由于这两个标签都没有 "),a("code",[t._v("VNodeData")]),t._v("，所以只需要更新它们的子节点，旧的 "),a("code",[t._v("li")]),t._v(" 元素的子节点是文本节点 "),a("code",[t._v("'1'")]),t._v("，而新的 "),a("code",[t._v("li")]),t._v(" 标签的子节点是文本节点 "),a("code",[t._v("'3'")]),t._v("，所以最终会调用一次 "),a("code",[t._v("patchText")]),t._v(" 函数将 "),a("code",[t._v("li")]),t._v(" 标签的文本子节点由 "),a("code",[t._v("'1'")]),t._v(" 更新为 "),a("code",[t._v("'3'")]),t._v("。接着，使用旧 "),a("code",[t._v("children")]),t._v(" 的第二个节点和新 "),a("code",[t._v("children")]),t._v(" 的第二个节点进行比对，结果同样是调用一次 "),a("code",[t._v("patchText")]),t._v(" 函数用以更新 "),a("code",[t._v("li")]),t._v(" 标签的文本子节点。类似的，对于新旧 "),a("code",[t._v("children")]),t._v(" 的第三个节点同样也会调用一次 "),a("code",[t._v("patchText")]),t._v(" 函数更新其文本子节点。而这，就是问题所在，实际上我们通过观察新旧 "),a("code",[t._v("children")]),t._v(" 可以很容易的发现：新旧 "),a("code",[t._v("children")]),t._v(" 中的节点只有顺序是不同的，所以最佳的操作应该是"),a("strong",[t._v("通过移动元素的位置来达到更新的目的")]),t._v("。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("既然移动元素是最佳期望，那么我们就需要思考一下，能否通过移动元素来完成更新？能够移动元素的关键在于：我们需要在新旧 "),a("code",[t._v("children")]),t._v(" 的节点中保存映射关系，以便我们能够在旧 "),a("code",[t._v("children")]),t._v(" 的节点中找到可复用的节点。这时候我们就需要给 "),a("code",[t._v("children")]),t._v(" 中的节点添加唯一标识，也就是我们常说的 "),a("code",[t._v("key")]),t._v("，在没有 "),a("code",[t._v("key")]),t._v(" 的情况下，我们是没办法知道新 "),a("code",[t._v("children")]),t._v(" 中的节点是否可以在旧 "),a("code",[t._v("children")]),t._v(" 中找到可复用的节点的，如下图所示：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("新旧 "),a("code",[t._v("children")]),t._v(" 中的节点都是 "),a("code",[t._v("li")]),t._v(" 标签，以新 "),a("code",[t._v("children")]),t._v(" 的第一个 "),a("code",[t._v("li")]),t._v(" 标签为例，你能说出在旧 "),a("code",[t._v("children")]),t._v(" 中哪一个 "),a("code",[t._v("li")]),t._v(" 标签可被它复用吗？不能，所以，为了明确的知道新旧 "),a("code",[t._v("children")]),t._v(" 中节点的映射关系，我们需要在 "),a("code",[t._v("VNode")]),t._v(" 创建伊始就为其添加唯一的标识，即 "),a("code",[t._v("key")]),t._v(" 属性。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("我们可以在使用 "),a("code",[t._v("h")]),t._v(" 函数创建 "),a("code",[t._v("VNode")]),t._v(" 时，通过 "),a("code",[t._v("VNodeData")]),t._v(" 为即将创建的 "),a("code",[t._v("VNode")]),t._v(" 设置一个 "),a("code",[t._v("key")]),t._v("：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("h")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'li'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" key"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'a'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("但是为了 "),a("code",[t._v("diff")]),t._v(" 算法更加方便的读取一个 "),a("code",[t._v("VNode")]),t._v(" 的 "),a("code",[t._v("key")]),t._v("，我们应该在创建 "),a("code",[t._v("VNode")]),t._v(" 时将 "),a("code",[t._v("VNodeData")]),t._v(" 中的 "),a("code",[t._v("key")]),t._v(" 添加到 "),a("code",[t._v("VNode")]),t._v(" 本身，所以我们需要修改一下 "),a("code",[t._v("h")]),t._v(" 函数，如下：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-js extra-class"},[a("div",{staticClass:"highlight-lines"},[a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("br"),a("br"),a("br"),a("br"),a("br"),a("br")]),a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("h")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("tag"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" data "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" children "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 返回 VNode 对象")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    _isVNode"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    flags"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    tag"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    key"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" data "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    children"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    childFlags"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    el"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("如上代码所示，我们在创建 "),a("code",[t._v("VNode")]),t._v(" 时，如果 "),a("code",[t._v("VNodeData")]),t._v(" 中存在 "),a("code",[t._v("key")]),t._v(" 属性，则我们会把其添加到 "),a("code",[t._v("VNode")]),t._v(" 对象本身。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("现在，在创建 "),s("code",[this._v("VNode")]),this._v(" 时已经可以为 "),s("code",[this._v("VNode")]),this._v(" 添加唯一标识了，我们使用 "),s("code",[this._v("key")]),this._v(" 来修改之前的例子，如下：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 旧 children")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("h")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'li'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" key"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'a'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("h")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'li'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" key"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'b'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("h")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'li'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" key"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'c'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 新 children")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("h")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'li'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" key"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'c'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("h")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'li'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" key"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'a'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("h")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'li'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" key"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'b'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("有了 "),s("code",[this._v("key")]),this._v(" 我们就能够明确的知道新旧 "),s("code",[this._v("children")]),this._v(" 中节点的映射关系，如下图所示：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("知道了映射关系，我们就很容易判断新 "),a("code",[t._v("children")]),t._v(" 中的节点是否可被复用：只需要遍历新 "),a("code",[t._v("children")]),t._v(" 中的每一个节点，并去旧 "),a("code",[t._v("children")]),t._v(" 中寻找是否存在具有相同 "),a("code",[t._v("key")]),t._v(" 值的节点，如下代码所示：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 遍历新的 children")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" nextChildren"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" nextVNode "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" nextChildren"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" j "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 遍历旧的 children")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("j"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" j "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" prevChildren"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" j"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" prevVNode "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" prevChildren"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果找到了具有相同 key 值的两个节点，则调用 `patch` 函数更新之")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nextVNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" prevVNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("patch")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("prevVNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" nextVNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" container"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 这里需要 break")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("这段代码中有两层嵌套的 "),a("code",[t._v("for")]),t._v(" 循环语句，外层循环用于遍历新 "),a("code",[t._v("children")]),t._v("，内层循环用于遍历旧 "),a("code",[t._v("children")]),t._v("，其目的是尝试寻找具有相同 "),a("code",[t._v("key")]),t._v(" 值的两个节点，如果找到了，则认为新 "),a("code",[t._v("children")]),t._v(" 中的节点可以复用旧 "),a("code",[t._v("children")]),t._v(" 中已存在的节点，这时我们仍然需要调用 "),a("code",[t._v("patch")]),t._v(" 函数对节点进行更新，如果新节点相对于旧节点的 "),a("code",[t._v("VNodeData")]),t._v(" 和子节点都没有变化，则 "),a("code",[t._v("patch")]),t._v(" 函数什么都不会做(这是优化的关键所在)，如果新节点相对于旧节点的 "),a("code",[t._v("VNodeData")]),t._v(" 或子节点有变化，则 "),a("code",[t._v("patch")]),t._v(" 函数保证了更新的正确性。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"找到需要移动的节点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#找到需要移动的节点"}},[this._v("#")]),this._v(" 找到需要移动的节点")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("现在我们已经找到了可复用的节点，并进行了合适的更新操作，下一步需要做的，就是判断一个节点是否需要移动以及如何移动。如何判断节点是否需要移动呢？为了弄明白这个问题，我们可以先考虑不需要移动的情况，当新旧 "),s("code",[this._v("children")]),this._v(" 中的节点顺序不变时，就不需要额外的移动操作，如下：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("上图中的数字代表着节点在旧 "),s("code",[this._v("children")]),this._v(" 中的索引，我们来尝试执行一下本节介绍的算法，看看会发生什么：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ul",[a("li",[t._v("1、取出新 "),a("code",[t._v("children")]),t._v(" 的第一个节点，即 "),a("code",[t._v("li-a")]),t._v("，并尝试在旧 "),a("code",[t._v("children")]),t._v(" 中寻找 "),a("code",[t._v("li-a")]),t._v("，结果是我们找到了，并且 "),a("code",[t._v("li-a")]),t._v(" 在旧 "),a("code",[t._v("children")]),t._v(" 中的索引为 "),a("code",[t._v("0")]),t._v("。")]),t._v(" "),a("li",[t._v("2、取出新 "),a("code",[t._v("children")]),t._v(" 的第二个节点，即 "),a("code",[t._v("li-b")]),t._v("，并尝试在旧 "),a("code",[t._v("children")]),t._v(" 中寻找 "),a("code",[t._v("li-b")]),t._v("，也找到了，并且 "),a("code",[t._v("li-b")]),t._v(" 在旧 "),a("code",[t._v("children")]),t._v(" 中的索引为 "),a("code",[t._v("1")]),t._v("。")]),t._v(" "),a("li",[t._v("3、取出新 "),a("code",[t._v("children")]),t._v(" 的第三个节点，即 "),a("code",[t._v("li-c")]),t._v("，并尝试在旧 "),a("code",[t._v("children")]),t._v(" 中寻找 "),a("code",[t._v("li-c")]),t._v("，同样找到了，并且 "),a("code",[t._v("li-c")]),t._v(" 在旧 "),a("code",[t._v("children")]),t._v(" 中的索引为 "),a("code",[t._v("2")]),t._v("。")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("总结一下我们在“寻找”的过程中，先后遇到的索引顺序为："),a("code",[t._v("0")]),t._v("->"),a("code",[t._v("1")]),t._v("->"),a("code",[t._v("2")]),t._v("。这是一个递增的顺序，这说明"),a("strong",[t._v("如果在寻找的过程中遇到的索引呈现递增趋势，则说明新旧 "),a("code",[t._v("children")]),t._v(" 中节点顺序相同，不需要移动操作")]),t._v("。相反的，"),a("strong",[t._v("如果在寻找的过程中遇到的索引值不呈现递增趋势，则说明需要移动操作")]),t._v("，举个例子，下图展示了新旧 "),a("code",[t._v("children")]),t._v(" 中的节点顺序不一致的情况：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ul",[a("li",[t._v("1、取出新 "),a("code",[t._v("children")]),t._v(" 的第一个节点，即 "),a("code",[t._v("li-c")]),t._v("，并尝试在旧 "),a("code",[t._v("children")]),t._v(" 中寻找 "),a("code",[t._v("li-c")]),t._v("，结果是我们找到了，并且 "),a("code",[t._v("li-c")]),t._v(" 在旧 "),a("code",[t._v("children")]),t._v(" 中的索引为 "),a("code",[t._v("2")]),t._v("。")]),t._v(" "),a("li",[t._v("2、取出新 "),a("code",[t._v("children")]),t._v(" 的第二个节点，即 "),a("code",[t._v("li-a")]),t._v("，并尝试在旧 "),a("code",[t._v("children")]),t._v(" 中寻找 "),a("code",[t._v("li-a")]),t._v("，也找到了，并且 "),a("code",[t._v("li-a")]),t._v(" 在旧 "),a("code",[t._v("children")]),t._v(" 中的索引为 "),a("code",[t._v("0")]),t._v("。")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("到了这里，"),a("strong",[t._v("递增")]),t._v("的趋势被打破了，我们在寻找的过程中先遇到的索引值是 "),a("code",[t._v("2")]),t._v("，接着又遇到了比 "),a("code",[t._v("2")]),t._v(" 小的 "),a("code",[t._v("0")]),t._v("，这说明"),a("strong",[t._v("在旧 "),a("code",[t._v("children")]),t._v(" 中 "),a("code",[t._v("li-a")]),t._v(" 的位置要比 "),a("code",[t._v("li-c")]),t._v(" 靠前，但在新的 "),a("code",[t._v("children")]),t._v(" 中 "),a("code",[t._v("li-a")]),t._v(" 的位置要比 "),a("code",[t._v("li-c")]),t._v(" 靠后")]),t._v("。这时我们就知道了 "),a("code",[t._v("li-a")]),t._v(" 是那个需要被移动的节点，我们接着往下执行。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ul",[a("li",[t._v("3、取出新 "),a("code",[t._v("children")]),t._v(" 的第三个节点，即 "),a("code",[t._v("li-b")]),t._v("，并尝试在旧 "),a("code",[t._v("children")]),t._v(" 中寻找 "),a("code",[t._v("li-b")]),t._v("，同样找到了，并且 "),a("code",[t._v("li-b")]),t._v(" 在旧 "),a("code",[t._v("children")]),t._v(" 中的索引为 "),a("code",[t._v("1")]),t._v("。")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("我们发现 "),a("code",[t._v("1")]),t._v(" 同样小于 "),a("code",[t._v("2")]),t._v("，这说明"),a("strong",[t._v("在旧 "),a("code",[t._v("children")]),t._v(" 中节点 "),a("code",[t._v("li-b")]),t._v(" 的位置也要比 "),a("code",[t._v("li-c")]),t._v(" 的位置靠前，但在新的 "),a("code",[t._v("children")]),t._v(" 中 "),a("code",[t._v("li-b")]),t._v(" 的位置要比 "),a("code",[t._v("li-c")]),t._v(" 靠后")]),t._v("。所以 "),a("code",[t._v("li-b")]),t._v(" 也需要被移动。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("以上我们过程就是我们寻找需要移动的节点的过程，在这个过程中我们发现一个重要的数字："),a("code",[t._v("2")]),t._v("，是这个数字的存在才使得我们能够知道哪些节点需要移动，我们可以给这个数字一个名字，叫做："),a("strong",[t._v("寻找过程中在旧 "),a("code",[t._v("children")]),t._v(" 中所遇到的最大索引值")]),t._v("。如果在后续寻找的过程中发现存在索引值比"),a("strong",[t._v("最大索引值")]),t._v("小的节点，意味着该节点需要被移动。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("实际上，这就是 "),s("code",[this._v("React")]),this._v(" 所使用的算法。我们可以使用一个叫做 "),s("code",[this._v("lastIndex")]),this._v(" 的变量存储寻找过程中遇到的最大索引值，并且它的初始值为 "),s("code",[this._v("0")]),this._v("，如下代码所示：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-js extra-class"},[a("div",{staticClass:"highlight-lines"},[a("div",{staticClass:"highlighted"},[t._v(" ")]),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("br"),a("br"),a("br"),a("br"),a("br")]),a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 用来存储寻找过程中遇到的最大索引值")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" lastIndex "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 遍历新的 children")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" nextChildren"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" nextVNode "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" nextChildren"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" j "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 遍历旧的 children")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("j"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" j "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" prevChildren"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" j"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" prevVNode "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" prevChildren"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果找到了具有相同 key 值的两个节点，则调用 `patch` 函数更新之")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nextVNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" prevVNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("patch")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("prevVNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" nextVNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" container"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("j "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" lastIndex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 需要移动")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 更新 lastIndex")]),t._v("\n        lastIndex "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" j\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 这里需要 break")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("如上代码中，变量 "),a("code",[t._v("j")]),t._v(" 是节点在旧 "),a("code",[t._v("children")]),t._v(" 中的索引，如果它小于 "),a("code",[t._v("lastIndex")]),t._v(" 则代表当前遍历到的节点需要移动，否则我们就使用 "),a("code",[t._v("j")]),t._v(" 的值更新 "),a("code",[t._v("lastIndex")]),t._v(" 变量的值，这就保证了 "),a("code",[t._v("lastIndex")]),t._v(" 所存储的总是我们在旧 "),a("code",[t._v("children")]),t._v(" 中所遇到的最大索引。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"移动节点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#移动节点"}},[this._v("#")]),this._v(" 移动节点")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("新 "),a("code",[t._v("children")]),t._v(" 中的第一个节点是 "),a("code",[t._v("li-c")]),t._v("，它在旧 "),a("code",[t._v("children")]),t._v(" 中的索引为 "),a("code",[t._v("2")]),t._v("，由于 "),a("code",[t._v("li-c")]),t._v(" 是新 "),a("code",[t._v("children")]),t._v(" 中的第一个节点，所以它始终都是不需要移动的，只需要调用 "),a("code",[t._v("patch")]),t._v(" 函数更新即可，如下图：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("这里我们需要注意的，也是非常重要的一点是："),a("strong",[t._v("新 "),a("code",[t._v("children")]),t._v(" 中的 "),a("code",[t._v("li-c")]),t._v(" 节点在经过 "),a("code",[t._v("patch")]),t._v(" 函数之后，也将存在对真实 DOM 元素的引用")]),t._v("。下面的代码可以证明这一点：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-js extra-class"},[a("div",{staticClass:"highlight-lines"},[a("br"),a("br"),a("br"),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br")]),a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("patchElement")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("prevVNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" nextVNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" container")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 拿到 el 元素，注意这时要让 nextVNode.el 也引用该元素")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" el "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nextVNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("el "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" prevVNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("el"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  \n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("beforeCreate")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("$options"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("data "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("如上代码所示，这是 "),a("code",[t._v("patchElement")]),t._v(" 函数中的一段代码，在更新"),a("strong",[t._v("新旧")]),t._v(" "),a("code",[t._v("VNode")]),t._v(" 时，新的 "),a("code",[t._v("VNode")]),t._v(" 通过旧 "),a("code",[t._v("VNode")]),t._v(" 的 "),a("code",[t._v("el")]),t._v(" 属性实现了对真实 DOM 的引用。为什么说这一点很关键呢？继续往下看。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[a("code",[t._v("li-c")]),t._v(" 节点更新完毕，接下来是新 "),a("code",[t._v("children")]),t._v(" 中的第二个节点 "),a("code",[t._v("li-a")]),t._v("，它在旧 "),a("code",[t._v("children")]),t._v(" 中的索引是 "),a("code",[t._v("0")]),t._v("，由于 "),a("code",[t._v("0 < 2")]),t._v(" 所以 "),a("code",[t._v("li-a")]),t._v(" 是需要移动的节点，那应该怎么移动呢？很简单，新 "),a("code",[t._v("children")]),t._v(" 中的节点顺序实际上就是更新完成之后，节点应有的最终顺序，通过观察新 "),a("code",[t._v("children")]),t._v(" 可知，新 "),a("code",[t._v("children")]),t._v(" 中 "),a("code",[t._v("li-a")]),t._v(" 节点的前一个节点是 "),a("code",[t._v("li-c")]),t._v("，所以我们的移动方案应该是："),a("strong",[t._v("把 "),a("code",[t._v("li-a")]),t._v(" 节点对应的真实 DOM 移动到 "),a("code",[t._v("li-c")]),t._v(" 节点所对应真实 DOM 的后面")]),t._v("。这里的关键在于"),a("strong",[t._v("移动的是真实 DOM 而非 VNode")]),t._v("。所以我们需要分别拿到 "),a("code",[t._v("li-c")]),t._v(" 和 "),a("code",[t._v("li-a")]),t._v(" 所对应的真实 DOM，这时就体现出了上面提到的关键点："),a("strong",[t._v("新 "),a("code",[t._v("children")]),t._v(" 中的 "),a("code",[t._v("li-c")]),t._v(" 已经存在对真实 DOM 的引用了")]),t._v("，所以我们很容易就能拿到 "),a("code",[t._v("li-c")]),t._v(" 对应的真实 DOM。对于获取 "),a("code",[t._v("li-a")]),t._v(" 节点所对应的真实 DOM 将更加容易，由于我们当前遍历到的节点就是 "),a("code",[t._v("li-a")]),t._v("，所以我们可以直接通过旧 "),a("code",[t._v("children")]),t._v(" 中的 "),a("code",[t._v("li-a")]),t._v(" 节点拿到其真实 DOM 的引用，如下代码所示：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-js extra-class"},[a("div",{staticClass:"highlight-lines"},[a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br")]),a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 用来存储寻找过程中遇到的最大索引值")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" lastIndex "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 遍历新的 children")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" nextChildren"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" nextVNode "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" nextChildren"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" j "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 遍历旧的 children")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("j"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" j "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" prevChildren"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" j"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" prevVNode "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" prevChildren"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果找到了具有相同 key 值的两个节点，则调用 `patch` 函数更新之")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nextVNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" prevVNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("patch")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("prevVNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" nextVNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" container"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("j "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" lastIndex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 需要移动")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// refNode 是为了下面调用 insertBefore 函数准备的")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" refNode "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" nextChildren"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("el"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("nextSibling\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 调用 insertBefore 函数移动 DOM")]),t._v("\n        container"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("insertBefore")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("prevVNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("el"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" refNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 更新 lastIndex")]),t._v("\n        lastIndex "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" j\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 这里需要 break")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("观察如上代码段中高亮的部分，实际上这两句代码即可完成 DOM 的移动操作。我们来对这两句代码的工作方式做一个详细的解释，假设我们当前正在更新的节点是 "),a("code",[t._v("li-a")]),t._v("，那么如上代码中的变量 "),a("code",[t._v("i")]),t._v(" 就是节点 "),a("code",[t._v("li-a")]),t._v(" 在新 "),a("code",[t._v("children")]),t._v(" 中的位置索引。所以 "),a("code",[t._v("nextChildren[i - 1]")]),t._v(" 就是 "),a("code",[t._v("li-a")]),t._v(" 节点的前一个节点，也就是 "),a("code",[t._v("li-c")]),t._v(" 节点，由于 "),a("code",[t._v("li-c")]),t._v(" 节点存在对真实 DOM 的引用，所以我们可以通过其 "),a("code",[t._v("el")]),t._v(" 属性拿到真实 DOM，到了这一步，"),a("code",[t._v("li-c")]),t._v(" 节点的所对应的真实 DOM 我们已经得到了。但不要忘记我们的目标是："),a("strong",[t._v("把 "),a("code",[t._v("li-a")]),t._v(" 节点对应的真实 DOM 移动到 "),a("code",[t._v("li-c")]),t._v(" 节点所对应真实 DOM 的后面")]),t._v("，所以我们的思路应该是"),a("strong",[t._v("想办法拿到 "),a("code",[t._v("li-c")]),t._v(" 节点对应真实 DOM 的下一个兄弟节点，并把 "),a("code",[t._v("li-a")]),t._v(" 节点所对应真实 DOM 插到该节点的前面")]),t._v("，这才能保证移动的正确性。所以上面的代码中常量 "),a("code",[t._v("refNode")]),t._v(" 引用是 "),a("code",[t._v("li-c")]),t._v(" 节点对应真实 DOM 的下一个兄弟节点。拿到了正确的 "),a("code",[t._v("refNode")]),t._v(" 之后，我们就可以调用容器元素的 "),a("code",[t._v("insertBefore")]),t._v(" 方法来完成 DOM 的移动了，移动的对象就是 "),a("code",[t._v("li-a")]),t._v(" 节点所对应的真实 DOM，由于当前正在处理的就是 "),a("code",[t._v("li-a")]),t._v(" 节点，所以 "),a("code",[t._v("prevVNode")]),t._v(" 就是旧 "),a("code",[t._v("children")]),t._v(" 中的 "),a("code",[t._v("li-a")]),t._v(" 节点，它是存在对真实 DOM 的引用的，即 "),a("code",[t._v("prevVNode.el")]),t._v("。万事俱备，移动工作将顺利完成。说起来有些抽象，用一张图可以更加清晰的描述这个过程：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("观察不同颜色的线条，关键在于我们要找到 "),s("code",[this._v("VNode")]),this._v(" 所引用的真实 DOM，然后把真实 DOM 按照新 "),s("code",[this._v("children")]),this._v(" 中节点间的关系进行移动，由于新 "),s("code",[this._v("children")]),this._v(" 中节点的顺序就是最终的目标顺序，所以移动之后的真实 DOM 的顺序也会是最终的目标顺序。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"添加新元素"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#添加新元素"}},[this._v("#")]),this._v(" 添加新元素")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("在上面的讲解中，我们一直忽略了一个问题，即新 "),s("code",[this._v("children")]),this._v(" 中可能包含那些不能够通过移动来完成更新的节点，例如新 "),s("code",[this._v("children")]),this._v(" 中包含了一个全新的节点，这意味着在旧 "),s("code",[this._v("children")]),this._v(" 中是找不到该节点的，如下图所示：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("节点 "),a("code",[t._v("li-d")]),t._v(" 在旧的 "),a("code",[t._v("children")]),t._v(" 中是不存在的，所以当我们尝试在旧的 "),a("code",[t._v("children")]),t._v(" 中寻找 "),a("code",[t._v("li-d")]),t._v(" 节点时，是找不到可复用节点的，这时就没办法通过移动节点来完成更新操作，所以我们应该使用 "),a("code",[t._v("mount")]),t._v(" 函数将 "),a("code",[t._v("li-d")]),t._v(" 节点作为全新的 "),a("code",[t._v("VNode")]),t._v(" 挂载到合适的位置。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("我们将面临两个问题，第一个问题是：如何知道一个节点在旧的 "),s("code",[this._v("children")]),this._v(" 中是不存在的？这个问题比较好解决，如下代码所示：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-js extra-class"},[a("div",{staticClass:"highlight-lines"},[a("br"),a("br"),a("br"),a("br"),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("br"),a("br"),a("br"),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br")]),a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" lastIndex "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" nextChildren"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" nextVNode "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" nextChildren"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" j "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    find "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("j"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" j "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" prevChildren"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" j"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" prevVNode "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" prevChildren"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nextVNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" prevVNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      find "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("patch")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("prevVNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" nextVNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" container"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("j "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" lastIndex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 需要移动")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" refNode "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" nextChildren"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("el"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("nextSibling\n        container"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("insertBefore")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("prevVNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("el"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" refNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 更新 lastIndex")]),t._v("\n        lastIndex "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" j\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("如上高亮代码所示，我们在原来的基础上添加了变量 "),a("code",[t._v("find")]),t._v("，它将作为一个标志，代表新 "),a("code",[t._v("children")]),t._v(" 中的节点是否存在于旧 "),a("code",[t._v("children")]),t._v(" 中，初始值为 "),a("code",[t._v("false")]),t._v("，一旦在旧 "),a("code",[t._v("children")]),t._v(" 中寻找到了相应的节点，我们就将变量 "),a("code",[t._v("find")]),t._v(" 的值设置为 "),a("code",[t._v("true")]),t._v("，所以"),a("strong",[t._v("如果内层循环结束后，变量 "),a("code",[t._v("find")]),t._v(" 的值仍然为 "),a("code",[t._v("false")]),t._v("，则说明在旧的 "),a("code",[t._v("children")]),t._v(" 中找不到可复用的节点")]),t._v("，这时我们就需要使用 "),a("code",[t._v("mount")]),t._v(" 函数将当前遍历到的节点挂载到容器元素，如下高亮的代码所示：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-js extra-class"},[a("div",{staticClass:"highlight-lines"},[a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("br"),a("br")]),a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" lastIndex "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" nextChildren"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" nextVNode "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" nextChildren"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" j "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    find "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("j"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" j "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" prevChildren"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" j"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" prevVNode "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" prevChildren"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nextVNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" prevVNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      find "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("patch")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("prevVNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" nextVNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" container"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("j "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" lastIndex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 需要移动")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" refNode "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" nextChildren"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("el"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("nextSibling\n        container"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("insertBefore")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("prevVNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("el"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" refNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 更新 lastIndex")]),t._v("\n        lastIndex "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" j\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("find"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 挂载新节点")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("mount")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nextVNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" container"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("当内层循环结束之后，如果变量 "),a("code",[t._v("find")]),t._v(" 的值仍然为 "),a("code",[t._v("false")]),t._v("，则说明 "),a("code",[t._v("nextVNode")]),t._v(" 是全新的节点，所以我们直接调用 "),a("code",[t._v("mount")]),t._v(" 函数将其挂载到容器元素 "),a("code",[t._v("container")]),t._v(" 中。但是很遗憾，这段代码不能正常的工作，这是因为"),a("strong",[t._v("我们之前编写的 "),a("code",[t._v("mountElement")]),t._v(" 函数存在缺陷，它总是调用 "),a("code",[t._v("appendChild")]),t._v(" 方法插入 DOM 元素")]),t._v("，所以上面的代码始终会把新的节点作为容器元素的最后一个子节点添加到末尾，这不是我们想要的结果，我们应该按照节点在新的 "),a("code",[t._v("children")]),t._v(" 中的位置将其添加到正确的地方，如下图所示：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("新的 "),a("code",[t._v("li-d")]),t._v(" 节点紧跟在 "),a("code",[t._v("li-a")]),t._v(" 节点的后面，所以正确的做法应该是把 "),a("code",[t._v("li-d")]),t._v(" 节点添加到 "),a("code",[t._v("li-a")]),t._v(" 节点所对应真实 DOM 的后面才行。如何才能保证 "),a("code",[t._v("li-d")]),t._v(" 节点始终被添加到 "),a("code",[t._v("li-a")]),t._v(" 节点的后面呢？答案是使用 "),a("code",[t._v("insertBefore")]),t._v(" 方法代替 "),a("code",[t._v("appendChild")]),t._v(" 方法，我们可以找到 "),a("code",[t._v("li-a")]),t._v(" 节点所对应真实 DOM 的下一个节点，然后将 "),a("code",[t._v("li-d")]),t._v(" 节点插入到该节点之前即可，如下高亮代码所示：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-js extra-class"},[a("div",{staticClass:"highlight-lines"},[a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("br"),a("br"),a("br")]),a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" lastIndex "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" nextChildren"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" nextVNode "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" nextChildren"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" j "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    find "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("j"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" j "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" prevChildren"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" j"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" prevVNode "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" prevChildren"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nextVNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" prevVNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      find "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("patch")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("prevVNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" nextVNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" container"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("j "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" lastIndex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 需要移动")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" refNode "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" nextChildren"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("el"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("nextSibling\n        container"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("insertBefore")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("prevVNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("el"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" refNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 更新 lastIndex")]),t._v("\n        lastIndex "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" j\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("find"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 挂载新节点")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 找到 refNode")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" refNode "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("\n      i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" prevChildren"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("el\n        "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" nextChildren"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("el"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("nextSibling\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("mount")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nextVNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" container"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" refNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("我们先找到当前遍历到的节点的前一个节点，即 "),a("code",[t._v("nextChildren[i - 1]")]),t._v("，接着找到该节点所对应真实 DOM 的下一个子节点作为 "),a("code",[t._v("refNode")]),t._v("，即 "),a("code",[t._v("nextChildren[i - 1].el.nextSibling")]),t._v("，但是由于当前遍历到的节点有可能是新 "),a("code",[t._v("children")]),t._v(" 的第一个节点，这时 "),a("code",[t._v("i - 1 < 0")]),t._v("，这将导致 "),a("code",[t._v("nextChildren[i - 1]")]),t._v(" 不存在，所以当 "),a("code",[t._v("i - 1 < 0")]),t._v(" 时，我们就知道"),a("strong",[t._v("新的节点是作为第一个节点而存在的")]),t._v("，这时我们只需要把新的节点插入到最前面即可，所以我们使用 "),a("code",[t._v("prevChildren[0].el")]),t._v(" 作为 "),a("code",[t._v("refNode")]),t._v("。最后调用 "),a("code",[t._v("mount")]),t._v(" 函数挂载新节点时，我们为其传递了第四个参数 "),a("code",[t._v("refNode")]),t._v("，当 "),a("code",[t._v("refNode")]),t._v(" 存在时，我们应该使用 "),a("code",[t._v("insertBefore")]),t._v(" 方法代替 "),a("code",[t._v("appendChild")]),t._v(" 方法，这就需要我们修改之前实现的 "),a("code",[t._v("mount")]),t._v(" 函数了 "),a("code",[t._v("mountElement")]),t._v(" 函数，为它们添加第四个参数，如下：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-js extra-class"},[a("div",{staticClass:"highlight-lines"},[a("br"),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("br"),a("br"),a("br"),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("br"),a("br"),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("br"),a("br")]),a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// mount 函数")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("mount")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("vnode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" container"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" isSVG"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" refNode")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" flags "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" vnode\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("flags "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" VNodeFlags"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("ELEMENT")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 挂载普通标签")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("mountElement")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("vnode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" container"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" isSVG"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" refNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// mountElement 函数")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("mountElement")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("vnode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" container"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" isSVG"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" refNode")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n\n  refNode "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" container"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("insertBefore")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" refNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" container"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("appendChild")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("这样，当新 "),s("code",[this._v("children")]),this._v(" 中存在全新的节点时，我们就能够保证正确的将其添加到容器元素内了。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"tip custom-block"},[s("p",{staticClass:"custom-block-title"},[this._v("TIP")]),this._v(" "),s("p",[this._v("实际上，所有与挂载和 "),s("code",[this._v("patch")]),this._v(" 相关的函数都应该接收 "),s("code",[this._v("refNode")]),this._v(" 作为参数，这里我们旨在让读者掌握核心思路，避免讲解过程的冗杂。")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"移除不存在的元素"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#移除不存在的元素"}},[this._v("#")]),this._v(" 移除不存在的元素")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("可以看出，新的 "),a("code",[t._v("children")]),t._v(" 中已经不存在 "),a("code",[t._v("li-c")]),t._v(" 节点了，所以我们应该想办法将 "),a("code",[t._v("li-c")]),t._v(" 节点对应的真实 DOM 从容器元素内移除。但我们之前编写的算法还不能完成这个任务，因为外层循环遍历的是新的 "),a("code",[t._v("children")]),t._v("，所以外层循环会执行两次，第一次用于处理 "),a("code",[t._v("li-a")]),t._v(" 节点，第二次用于处理 "),a("code",[t._v("li-b")]),t._v(" 节点，此时整个算法已经运行结束了。所以，我们需要在外层循环结束之后，再优先遍历一次旧的 "),a("code",[t._v("children")]),t._v("，并尝试拿着旧 "),a("code",[t._v("children")]),t._v(" 中的节点去新 "),a("code",[t._v("children")]),t._v(" 中寻找相同的节点，如果找不到则说明该节点已经不存在于新 "),a("code",[t._v("children")]),t._v(" 中了，这时我们应该将该节点对应的真实 DOM 移除，如下高亮代码所示：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-js extra-class"},[a("div",{staticClass:"highlight-lines"},[a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("br")]),a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" lastIndex "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" nextChildren"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" nextVNode "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" nextChildren"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" j "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    find "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("j"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" j "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" prevChildren"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" j"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("find"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 挂载新节点")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 移除已经不存在的节点")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 遍历旧的节点")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" prevChildren"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" prevVNode "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" prevChildren"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 拿着旧 VNode 去新 children 中寻找相同的节点")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" has "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" nextChildren"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("find")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("nextVNode")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" nextVNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" prevVNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("has"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果没有找到相同的节点，则移除")]),t._v("\n    container"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("removeChild")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("prevVNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("el"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("至此，第一个完整的 "),s("code",[this._v("Diff")]),this._v(" 算法我们就讲解完毕了，这个算法就是 "),s("code",[this._v("React")]),this._v(" 所采用的 "),s("code",[this._v("Diff")]),this._v(" 算法。但该算法仍然存在可优化的空间，我们将在下一小节继续讨论。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"另一个思路-双端比较"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#另一个思路-双端比较"}},[this._v("#")]),this._v(" 另一个思路 - 双端比较")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"双端比较的原理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#双端比较的原理"}},[this._v("#")]),this._v(" 双端比较的原理")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("刚刚提到了 "),s("code",[this._v("React")]),this._v(" 的 "),s("code",[this._v("Diff")]),this._v(" 算法是存在优化空间的，想要要找到优化的关键点，我们首先要知道它存在什么问题。来看下图：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("在这个例子中，我们可以通过肉眼观察从而得知最优的解决方案应该是："),a("strong",[t._v("把 "),a("code",[t._v("li-c")]),t._v(" 节点对应的真实 DOM 移动到最前面即可")]),t._v("，只需要一次移动即可完成更新。然而，"),a("code",[t._v("React")]),t._v(" 所采用的 "),a("code",[t._v("Diff")]),t._v(" 算法在更新如上案例的时候，会进行两次移动：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("显然，这种做法必然会造成额外的性能开销。那么有没有办法来避免这种多余的 DOM 移动呢？当然有办法，那就是我们接下来要介绍的一个新的思路："),s("strong",[this._v("双端比较")]),this._v("。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("所谓双端比较，就是同时从新旧 "),s("code",[this._v("children")]),this._v(" 的两端开始进行比较的一种方式，所以我们需要四个索引值，分别指向新旧 "),s("code",[this._v("children")]),this._v(" 的两端，如下图所示：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("我们使用四个变量 "),a("code",[t._v("oldStartIdx")]),t._v("、"),a("code",[t._v("oldEndIdx")]),t._v("、"),a("code",[t._v("newStartIdx")]),t._v(" 以及 "),a("code",[t._v("newEndIdx")]),t._v(" 分别存储旧 "),a("code",[t._v("children")]),t._v(" 和新 "),a("code",[t._v("children")]),t._v(" 的两个端点的位置索引，可以用如下代码来表示：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" oldStartIdx "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" oldEndIdx "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" prevChildren"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" newStartIdx "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" newEndIdx "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" nextChildren"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("除了位置索引之外，我们还需要拿到四个位置索引所指向的 "),s("code",[this._v("VNode")]),this._v("：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" oldStartVNode "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" prevChildren"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("oldStartIdx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" oldEndVNode "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" prevChildren"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("oldEndIdx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" newStartVNode "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" nextChildren"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("newStartIdx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" newEndVNode "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" nextChildren"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("newEndIdx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ul",[a("li",[t._v("1、使用旧 "),a("code",[t._v("children")]),t._v(" 的头一个 "),a("code",[t._v("VNode")]),t._v(" 与新 "),a("code",[t._v("children")]),t._v(" 的头一个 "),a("code",[t._v("VNode")]),t._v(" 比对，即 "),a("code",[t._v("oldStartVNode")]),t._v(" 和 "),a("code",[t._v("newStartVNode")]),t._v(" 比较对。")]),t._v(" "),a("li",[t._v("2、使用旧 "),a("code",[t._v("children")]),t._v(" 的最后一个 "),a("code",[t._v("VNode")]),t._v(" 与新 "),a("code",[t._v("children")]),t._v(" 的最后一个 "),a("code",[t._v("VNode")]),t._v(" 比对，即 "),a("code",[t._v("oldEndVNode")]),t._v(" 和 "),a("code",[t._v("newEndVNode")]),t._v(" 比对。")]),t._v(" "),a("li",[t._v("3、使用旧 "),a("code",[t._v("children")]),t._v(" 的头一个 "),a("code",[t._v("VNode")]),t._v(" 与新 "),a("code",[t._v("children")]),t._v(" 的最后一个 "),a("code",[t._v("VNode")]),t._v(" 比对，即 "),a("code",[t._v("oldStartVNode")]),t._v(" 和 "),a("code",[t._v("newEndVNode")]),t._v(" 比对。")]),t._v(" "),a("li",[t._v("4、使用旧 "),a("code",[t._v("children")]),t._v(" 的最后一个 "),a("code",[t._v("VNode")]),t._v(" 与新 "),a("code",[t._v("children")]),t._v(" 的头一个 "),a("code",[t._v("VNode")]),t._v(" 比对，即 "),a("code",[t._v("oldEndVNode")]),t._v(" 和 "),a("code",[t._v("newStartVNode")]),t._v(" 比对。")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("在如上四步比对过程中，试图去寻找可复用的节点，即拥有相同 "),s("code",[this._v("key")]),this._v(" 值的节点。这四步比对中，在任何一步中寻找到了可复用节点，则会停止后续的步骤，可以用下图来描述在一次比对过程中的四个步骤：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("oldStartVNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" newStartVNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 步骤一：oldStartVNode 和 newStartVNode 比对")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("oldEndVNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" newEndVNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 步骤二：oldEndVNode 和 newEndVNode 比对")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("oldStartVNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" newEndVNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 步骤三：oldStartVNode 和 newEndVNode 比对")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("oldEndVNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" newStartVNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 步骤四：oldEndVNode 和 newStartVNode 比对")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("每次比对完成之后，如果在某一步骤中找到了可复用的节点，我们就需要将相应的位置索引"),s("strong",[this._v("后移/前移")]),this._v("一位。以上图为例：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ul",[a("li",[t._v("第一步：拿旧 "),a("code",[t._v("children")]),t._v(" 中的 "),a("code",[t._v("li-a")]),t._v(" 和新 "),a("code",[t._v("children")]),t._v(" 中的 "),a("code",[t._v("li-d")]),t._v(" 进行比对，由于二者 "),a("code",[t._v("key")]),t._v(" 值不同，所以不可复用，什么都不做。")]),t._v(" "),a("li",[t._v("第二步：拿旧 "),a("code",[t._v("children")]),t._v(" 中的 "),a("code",[t._v("li-d")]),t._v(" 和新 "),a("code",[t._v("children")]),t._v(" 中的 "),a("code",[t._v("li-c")]),t._v(" 进行比对，同样不可复用，什么都不做。")]),t._v(" "),a("li",[t._v("第三步：拿旧 "),a("code",[t._v("children")]),t._v(" 中的 "),a("code",[t._v("li-a")]),t._v(" 和新 "),a("code",[t._v("children")]),t._v(" 中的 "),a("code",[t._v("li-c")]),t._v(" 进行比对，什么都不做。")]),t._v(" "),a("li",[t._v("第四部：拿旧 "),a("code",[t._v("children")]),t._v(" 中的 "),a("code",[t._v("li-d")]),t._v(" 和新 "),a("code",[t._v("children")]),t._v(" 中的 "),a("code",[t._v("li-d")]),t._v(" 进行比对，由于这两个节点拥有相同的 "),a("code",[t._v("key")]),t._v(" 值，所以我们在这次比对的过程中找到了可复用的节点。")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("由于我们在第四步的比对中找到了可复用的节点，即 "),a("code",[t._v("oldEndVNode")]),t._v(" 和 "),a("code",[t._v("newStartVNode")]),t._v(" 拥有相同的 "),a("code",[t._v("key")]),t._v(" 值，这说明："),a("strong",[a("code",[t._v("li-d")]),t._v(" 节点所对应的真实 DOM 原本是最后一个子节点，并且更新之后它应该变成第一个子节点")]),t._v("。所以我们需要把 "),a("code",[t._v("li-d")]),t._v(" 所对应的真实 DOM 移动到最前方即可：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-js extra-class"},[a("div",{staticClass:"highlight-lines"},[a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("br"),a("br")]),a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("oldStartVNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" newStartVNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 步骤一：oldStartVNode 和 newStartVNode 比对")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("oldEndVNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" newEndVNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 步骤二：oldEndVNode 和 newEndVNode 比对")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("oldStartVNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" newEndVNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 步骤三：oldStartVNode 和 newEndVNode 比对")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("oldEndVNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" newStartVNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 步骤四：oldEndVNode 和 newStartVNode 比对")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 先调用 patch 函数完成更新")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("patch")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("oldEndVNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" newStartVNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" container"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 更新完成后，将容器中最后一个子节点移动到最前面，使其成为第一个子节点")]),t._v("\n  container"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("insertBefore")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("oldEndVNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("el"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" oldStartVNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("el"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 更新索引，指向下一个位置")]),t._v("\n  oldEndVNode "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" prevChildren"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("oldEndIdx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  newStartVNode "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" nextChildren"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("newStartIdx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("由于 "),a("code",[t._v("li-d")]),t._v(" 节点所对应的真实 DOM 元素已经更新完成且被移动，所以现在真实 DOM 的顺序是："),a("code",[t._v("li-d")]),t._v("、"),a("code",[t._v("li-a")]),t._v("、"),a("code",[t._v("li-b")]),t._v("、"),a("code",[t._v("li-c")]),t._v("，如下图所示：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("oldStartIdx "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" oldEndIdx "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" newStartIdx "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" newEndIdx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("oldStartVNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" newStartVNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 步骤一：oldStartVNode 和 newStartVNode 比对")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("oldEndVNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" newEndVNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 步骤二：oldEndVNode 和 newEndVNode 比对")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("oldStartVNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" newEndVNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 步骤三：oldStartVNode 和 newEndVNode 比对")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("oldEndVNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" newStartVNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 步骤四：oldEndVNode 和 newStartVNode 比对")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("我们将每一轮比对所做的工作封装到一个 "),a("code",[t._v("while")]),t._v(" 循环内，循环结束的条件是要么 "),a("code",[t._v("oldStartIdx")]),t._v(" 大于 "),a("code",[t._v("oldEndIdx")]),t._v("，要么 "),a("code",[t._v("newStartIdx")]),t._v(" 大于 "),a("code",[t._v("newEndIdx")]),t._v("。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ul",[a("li",[t._v("第一步：拿旧 "),a("code",[t._v("children")]),t._v(" 中的 "),a("code",[t._v("li-a")]),t._v(" 和新 "),a("code",[t._v("children")]),t._v(" 中的 "),a("code",[t._v("li-b")]),t._v(" 进行比对，由于二者 "),a("code",[t._v("key")]),t._v(" 值不同，所以不可复用，什么都不做。")]),t._v(" "),a("li",[t._v("第二步：拿旧 "),a("code",[t._v("children")]),t._v(" 中的 "),a("code",[t._v("li-c")]),t._v(" 和新 "),a("code",[t._v("children")]),t._v(" 中的 "),a("code",[t._v("li-c")]),t._v(" 进行比对，此时，由于二者拥有相同的 "),a("code",[t._v("key")]),t._v("，所以是可复用的节点，但是由于二者在新旧 "),a("code",[t._v("children")]),t._v(" 中都是最末尾的一个节点，所以是不需要进行移动操作的，只需要调用 "),a("code",[t._v("patch")]),t._v(" 函数更新即可，同时将相应的索引前移一位，如下高亮代码所示：")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-js extra-class"},[a("div",{staticClass:"highlight-lines"},[a("br"),a("br"),a("br"),a("br"),a("br"),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br")]),a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("oldStartIdx "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" oldEndIdx "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" newStartIdx "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" newEndIdx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("oldStartVNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" newStartVNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 步骤一：oldStartVNode 和 newStartVNode 比对")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("oldEndVNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" newEndVNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 步骤二：oldEndVNode 和 newEndVNode 比对")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 调用 patch 函数更新")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("patch")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("oldEndVNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" newEndVNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" container"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 更新索引，指向下一个位置")]),t._v("\n    oldEndVNode "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" prevChildren"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("oldEndIdx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    newEndVNode "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" nextChildren"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("newEndIdx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("oldStartVNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" newEndVNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 步骤三：oldStartVNode 和 newEndVNode 比对")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("oldEndVNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" newStartVNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 步骤四：oldEndVNode 和 newStartVNode 比对")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 先调用 patch 函数完成更新")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("patch")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("oldEndVNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" newStartVNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" container"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 更新完成后，将容器中最后一个子节点移动到最前面，使其成为第一个子节点")]),t._v("\n    container"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("insertBefore")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("oldEndVNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("el"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" oldStartVNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("el"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 更新索引，指向下一个位置")]),t._v("\n    oldEndVNode "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" prevChildren"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("oldEndIdx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    newStartVNode "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" nextChildren"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("newStartIdx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ul",[a("li",[t._v("第一步：拿旧 "),a("code",[t._v("children")]),t._v(" 中的 "),a("code",[t._v("li-a")]),t._v(" 和新 "),a("code",[t._v("children")]),t._v(" 中的 "),a("code",[t._v("li-b")]),t._v(" 进行比对，由于二者 "),a("code",[t._v("key")]),t._v(" 值不同，所以不可复用，什么都不做。")]),t._v(" "),a("li",[t._v("第二步：拿旧 "),a("code",[t._v("children")]),t._v(" 中的 "),a("code",[t._v("li-b")]),t._v(" 和新 "),a("code",[t._v("children")]),t._v(" 中的 "),a("code",[t._v("li-a")]),t._v(" 进行比对，不可复用，什么都不做。")]),t._v(" "),a("li",[t._v("第三步：拿旧 "),a("code",[t._v("children")]),t._v(" 中的 "),a("code",[t._v("li-a")]),t._v(" 和新 "),a("code",[t._v("children")]),t._v(" 中的 "),a("code",[t._v("li-a")]),t._v(" 进行比对，此时，我们找到了可复用的节点。")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("这一次满足的条件是："),a("strong",[a("code",[t._v("oldStartVNode.key === newEndVNode.key")])]),t._v("，这说明："),a("strong",[a("code",[t._v("li-a")]),t._v(" 节点所对应的真实 DOM 原本是第一个子节点，但现在变成了“最后”一个子节点")]),t._v("，这里的“最后”一词使用了引号，这是因为大家要明白“最后”的真正含义，它并不是指真正意义上的最后一个节点，而是指当前索引范围内的最后一个节点。所以移动操作也是比较明显的，我们将 "),a("code",[t._v("oldStartVNode")]),t._v(" 对应的真实 DOM 移动到 "),a("code",[t._v("oldEndVNode")]),t._v(" 所对应真实 DOM 的后面即可，如下高亮代码所示：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-js extra-class"},[a("div",{staticClass:"highlight-lines"},[a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br")]),a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("oldStartIdx "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" oldEndIdx "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" newStartIdx "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" newEndIdx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("oldStartVNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" newStartVNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 步骤一：oldStartVNode 和 newStartVNode 比对")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("oldEndVNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" newEndVNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 步骤二：oldEndVNode 和 newEndVNode 比对")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 调用 patch 函数更新")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("patch")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("oldEndVNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" newEndVNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" container"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 更新索引，指向下一个位置")]),t._v("\n    oldEndVNode "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" prevChildren"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("oldEndIdx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    newEndVNode "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" newEndVNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("newEndIdx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("oldStartVNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" newEndVNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 步骤三：oldStartVNode 和 newEndVNode 比对")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 调用 patch 函数更新")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("patch")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("oldStartVNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" newEndVNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" container"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 将 oldStartVNode.el 移动到 oldEndVNode.el 的后面，也就是 oldEndVNode.el.nextSibling 的前面")]),t._v("\n    container"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("insertBefore")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n      oldStartVNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("el"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      oldEndVNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("el"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("nextSibling\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 更新索引，指向下一个位置")]),t._v("\n    oldStartVNode "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" prevChildren"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("oldStartIdx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    newEndVNode "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" nextChildren"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("newEndIdx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("oldEndVNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" newStartVNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 步骤四：oldEndVNode 和 newStartVNode 比对")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 先调用 patch 函数完成更新")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("patch")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("oldEndVNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" newStartVNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" container"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 更新完成后，将容器中最后一个子节点移动到最前面，使其成为第一个子节点")]),t._v("\n    container"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("insertBefore")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("oldEndVNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("el"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" oldStartVNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("el"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 更新索引，指向下一个位置")]),t._v("\n    oldEndVNode "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" prevChildren"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("oldEndIdx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    newStartVNode "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" nextChildren"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("newStartIdx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("在这一步的更新中，真实 DOM 的顺序是有变化的，"),s("code",[this._v("li-a")]),this._v(" 节点对应的真实 DOM 被移到了 "),s("code",[this._v("li-b")]),this._v(" 节点对应真实 DOM 的后面，同时由于位置索引也在相应的移动，所以在这一轮更新之后，现在的结果看上去应该如下图所示：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("现在 "),a("code",[t._v("oldStartIdx")]),t._v(" 和 "),a("code",[t._v("oldEndIdx")]),t._v(" 指向了同一个位置，即旧 "),a("code",[t._v("children")]),t._v(" 中的 "),a("code",[t._v("li-b")]),t._v(" 节点。同样的 "),a("code",[t._v("newStartIdx")]),t._v(" 和 "),a("code",[t._v("newEndIdx")]),t._v(" 也指向了同样的位置，即新 "),a("code",[t._v("children")]),t._v(" 中的 "),a("code",[t._v("li-b")]),t._v("。由于此时仍然满足循环条件，所以会继续下一轮的比对：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ul",[a("li",[t._v("第一步：拿旧 "),a("code",[t._v("children")]),t._v(" 中的 "),a("code",[t._v("li-b")]),t._v(" 和新 "),a("code",[t._v("children")]),t._v(" 中的 "),a("code",[t._v("li-b")]),t._v(" 进行比对，二者拥有相同的 "),a("code",[t._v("key")]),t._v("，可复用。")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("此时，在第一步的时候就已经找到了可复用的节点，满足的条件是："),a("strong",[t._v("oldStartVNode.key === newStartVNode.key")]),t._v("，但是由于该节点无论是在新 "),a("code",[t._v("children")]),t._v(" 中还是旧 "),a("code",[t._v("children")]),t._v(" 中，都是“第一个”节点，所以位置不需要变化，即不需要移动操作，只需要调用 "),a("code",[t._v("patch")]),t._v(" 函数更新即可，同时也要将相应的位置所以下移一位，如下高亮代码所示：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-js extra-class"},[a("div",{staticClass:"highlight-lines"},[a("br"),a("br"),a("br"),a("br"),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br")]),a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("oldStartIdx "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" oldEndIdx "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" newStartIdx "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" newEndIdx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("oldStartVNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" newStartVNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 步骤一：oldStartVNode 和 newStartVNode 比对")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 调用 patch 函数更新")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("patch")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("oldStartVNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" newStartVNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" container"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 更新索引，指向下一个位置")]),t._v("\n    oldStartVNode "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" prevChildren"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("oldStartIdx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    newStartVNode "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" nextChildren"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("newStartIdx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("oldEndVNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" newEndVNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("oldStartVNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" newEndVNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("oldEndVNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" newStartVNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("在这一轮更新完成之后，虽然没有进行任何移动操作，但是我们发现，真实 DOM 的顺序，已经与新 "),s("code",[this._v("children")]),this._v(" 中节点的顺序保持一致了，也就是说我们圆满的完成了目标，如下图所示：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("另外，观察上图可以发现，此时 "),a("code",[t._v("oldStartIdx")]),t._v(" 和 "),a("code",[t._v("newStartIdx")]),t._v(" 分别比 "),a("code",[t._v("oldEndIdx")]),t._v(" 和 "),a("code",[t._v("newEndIdx")]),t._v(" 要大，所以这将是最后一轮的比对，循环将终止，以上就是双端比较的核心原理。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"双端比较的优势"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#双端比较的优势"}},[this._v("#")]),this._v(" 双端比较的优势")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("前面分析过，如果采用 "),a("code",[t._v("React")]),t._v(" 的方式来对上例进行更新，则会执行两次移动操作，首先会把 "),a("code",[t._v("li-a")]),t._v(" 节点对应的真实 DOM 移动到 "),a("code",[t._v("li-c")]),t._v(" 节点对应的真实 DOM 的后面，接着再把 "),a("code",[t._v("li-b")]),t._v(" 节点所对应的真实 DOM 移动到 "),a("code",[t._v("li-a")]),t._v(" 节点所对应真实 DOM 的后面，即：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ul",[a("li",[t._v("第一步：拿旧 "),a("code",[t._v("children")]),t._v(" 中的 "),a("code",[t._v("li-a")]),t._v(" 和新 "),a("code",[t._v("children")]),t._v(" 中的 "),a("code",[t._v("li-c")]),t._v(" 进行比对，由于二者 "),a("code",[t._v("key")]),t._v(" 值不同，所以不可复用，什么都不做。")]),t._v(" "),a("li",[t._v("第二步：拿旧 "),a("code",[t._v("children")]),t._v(" 中的 "),a("code",[t._v("li-c")]),t._v(" 和新 "),a("code",[t._v("children")]),t._v(" 中的 "),a("code",[t._v("li-b")]),t._v(" 进行比对，不可复用，什么都不做。")]),t._v(" "),a("li",[t._v("第三步：拿旧 "),a("code",[t._v("children")]),t._v(" 中的 "),a("code",[t._v("li-a")]),t._v(" 和新 "),a("code",[t._v("children")]),t._v(" 中的 "),a("code",[t._v("li-b")]),t._v(" 进行比对，不可复用，什么都不做。")]),t._v(" "),a("li",[t._v("第四步：拿旧 "),a("code",[t._v("children")]),t._v(" 中的 "),a("code",[t._v("li-c")]),t._v(" 和新 "),a("code",[t._v("children")]),t._v(" 中的 "),a("code",[t._v("li-c")]),t._v(" 进行比对，此时，两个节点拥有相同的 "),a("code",[t._v("key")]),t._v(" 值，可复用。")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("到了第四步，对于 "),a("code",[t._v("li-c")]),t._v(" 节点来说，它原本是整个 "),a("code",[t._v("children")]),t._v(" 的最后一个子节点，但是现在变成了新 "),a("code",[t._v("children")]),t._v(" 的第一个子节点，按照上端比较的算法逻辑，此时会把 "),a("code",[t._v("li-c")]),t._v(" 节点所对应的真实 DOM 移动到 "),a("code",[t._v("li-a")]),t._v(" 节点所对应真实 DOM 的前面，即：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("可以看到，我们只通过一次 DOM 移动，就使得真实 DOM 的顺序与新 "),s("code",[this._v("children")]),this._v(" 中节点的顺序一致，完成了更新。换句话说，双端比较在移动 DOM 方面更具有普适性，不会因为 DOM 结构的差异而产生影响。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"非理想情况的处理方式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#非理想情况的处理方式"}},[this._v("#")]),this._v(" 非理想情况的处理方式")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("上图中 ①、②、③、④ 这四步中的每一步比对，都无法找到可复用的节点，这时应该怎么办呢？没办法，我们只能拿新 "),s("code",[this._v("children")]),this._v(" 中的第一个节点尝试去旧 "),s("code",[this._v("children")]),this._v(" 中寻找，试图找到拥有相同 "),s("code",[this._v("key")]),this._v(" 值的节点，如下高亮代码所示：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-js extra-class"},[a("div",{staticClass:"highlight-lines"},[a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("br"),a("br"),a("br")]),a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("oldStartIdx "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" oldEndIdx "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" newStartIdx "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" newEndIdx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("oldStartVNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" newStartVNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("oldEndVNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" newEndVNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("oldStartVNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" newEndVNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("oldEndVNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" newStartVNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 遍历旧 children，试图寻找与 newStartVNode 拥有相同 key 值的元素")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" idxInOld "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" prevChildren"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("findIndex")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("node")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" node"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" newStartVNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("这段代码增加了 "),a("code",[t._v("else")]),t._v(" 分支，用来处理在四个步骤的比对中都没有成功的情况，我们遍历了旧的 "),a("code",[t._v("children")]),t._v("，并试图找到与新 "),a("code",[t._v("children")]),t._v(" 中第一个节点拥有相同 "),a("code",[t._v("key")]),t._v(" 值的节点，并把该节点在旧 "),a("code",[t._v("children")]),t._v(" 中的位置索引记录下来，存储到 "),a("code",[t._v("idxInOld")]),t._v(" 常量中。这里的关键点并不在于我们找到了位置索引，而是要明白**在旧的 "),a("code",[t._v("children")]),t._v(" 中找到了与新 "),a("code",[t._v("children")]),t._v(" 中第一个节点拥有相同 "),a("code",[t._v("key")]),t._v(" 值的节点，意味着什么？**这意味着："),a("strong",[t._v("旧 "),a("code",[t._v("children")]),t._v(" 中的这个节点所对应的真实 DOM 在新 "),a("code",[t._v("children")]),t._v(" 的顺序中，已经变成了第一个节点")]),t._v("。所以我们需要把该节点所对应的真实 DOM 移动到最前头，如下图所示：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-js extra-class"},[a("div",{staticClass:"highlight-lines"},[a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("br"),a("br"),a("br")]),a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("oldStartIdx "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" oldEndIdx "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" newStartIdx "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" newEndIdx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("oldStartVNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" newStartVNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("oldEndVNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" newEndVNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("oldStartVNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" newEndVNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("oldEndVNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" newStartVNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 遍历旧 children，试图寻找与 newStartVNode 拥有相同 key 值的元素")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" idxInOld "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" prevChildren"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("findIndex")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("node")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" node"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" newStartVNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("idxInOld "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// vnodeToMove 就是在旧 children 中找到的节点，该节点所对应的真实 DOM 应该被移动到最前面")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" vnodeToMove "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" prevChildren"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("idxInOld"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 调用 patch 函数完成更新")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("patch")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("vnodeToMove"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" newStartVNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" container"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 把 vnodeToMove.el 移动到最前面，即 oldStartVNode.el 的前面")]),t._v("\n      container"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("insertBefore")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("vnodeToMove"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("el"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" oldStartVNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("el"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 由于旧 children 中该位置的节点所对应的真实 DOM 已经被移动，所以将其设置为 undefined")]),t._v("\n      prevChildren"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("idxInOld"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 将 newStartIdx 下移一位")]),t._v("\n    newStartVNode "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" nextChildren"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("newStartIdx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("如果 "),a("code",[t._v("idxInOld")]),t._v(" 存在，说明我们在旧 "),a("code",[t._v("children")]),t._v(" 中找到了相应的节点，于是我们拿到该节点，将其赋值给 "),a("code",[t._v("vnodeToMove")]),t._v(" 常量，意味着该节点是需要被移动的节点，同时调用 "),a("code",[t._v("patch")]),t._v(" 函数完成更新，接着将该节点所对应的真实 DOM 移动到最前面，也就是 "),a("code",[t._v("oldStartVNode.el")]),t._v(" 前面，由于该节点所对应的真实 DOM 已经被移动，所以我们将该节点置为 "),a("code",[t._v("undefined")]),t._v("，这是很关键的异步，最后我们将 "),a("code",[t._v("newStartIdx")]),t._v(" 下移一位，准备进行下一轮的比较。我们用一张图来描述这个过程结束之后的状态：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("这里大家需要注意，由上图可知，由于原本旧 "),a("code",[t._v("children")]),t._v(" 中的 "),a("code",[t._v("li-b")]),t._v(" 节点，此时已经变成了 "),a("code",[t._v("undefined")]),t._v("，所以在后续的比对过程中 "),a("code",[t._v("oldStartIdx")]),t._v(" 或 "),a("code",[t._v("oldEndIdx")]),t._v(" 二者当中总会有一个位置索引优先达到这个位置，也就是说此时 "),a("code",[t._v("oldStartVNode")]),t._v(" 或 "),a("code",[t._v("oldEndVNode")]),t._v(" 两者之一可能是 "),a("code",[t._v("undefined")]),t._v("，这说明该位置的元素在之前的比对中被移动到别的位置了，所以不再需要处理该位置的节点，这时我们需要跳过这一位置，所以我们需要增加如下高亮代码来完善我们的算法：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-js extra-class"},[a("div",{staticClass:"highlight-lines"},[a("br"),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br")]),a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("oldStartIdx "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" oldEndIdx "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" newStartIdx "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" newEndIdx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("oldStartVNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    oldStartVNode "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" prevChildren"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("oldStartIdx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("oldEndVNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    oldEndVNode "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" prevChildren"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("oldEndIdx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("oldStartVNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" newStartVNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("oldEndVNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" newEndVNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("oldStartVNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" newEndVNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("oldEndVNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" newStartVNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" idxInOld "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" prevChildren"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("findIndex")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("node")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" node"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" newStartVNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("idxInOld "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" vnodeToMove "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" prevChildren"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("idxInOld"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("patch")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("vnodeToMove"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" newStartVNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" container"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n      prevChildren"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("idxInOld"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),t._v("\n      container"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("insertBefore")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("vnodeToMove"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("el"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" oldStartVNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("el"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    newStartVNode "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" nextChildren"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("newStartIdx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("当 "),s("code",[this._v("oldStartVNode")]),this._v(" 或 "),s("code",[this._v("oldEndVNode")]),this._v(" 不存在时，说明该节点已经被移动了，我们只需要跳过该位置即可。以上就是我们所说的双端比较的非理想情况的处理方式。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"添加新元素-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#添加新元素-2"}},[this._v("#")]),this._v(" 添加新元素")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("在上一小节中，我们尝试拿着新 "),a("code",[t._v("children")]),t._v(" 中的第一个节点去旧 "),a("code",[t._v("children")]),t._v(" 中寻找与之拥有相同 "),a("code",[t._v("key")]),t._v(" 值的可复用节点，然后并非总是能够找得到，当新的 "),a("code",[t._v("children")]),t._v(" 中拥有全新的节点时，就会出现找不到的情况，如下图所示：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("在新 "),a("code",[t._v("children")]),t._v(" 中，节点 "),a("code",[t._v("li-d")]),t._v(" 是一个全新的节点。在这个例子中 ①、②、③、④ 这四步的比对仍然无法找到可复用节点，所以我们会尝试拿着新 "),a("code",[t._v("children")]),t._v(" 中的 "),a("code",[t._v("li-d")]),t._v(" 节点去旧的 "),a("code",[t._v("children")]),t._v(" 寻找与之拥有相同 "),a("code",[t._v("key")]),t._v(" 值的节点，结果很显然，我们无法找到这样的节点。这时说明该节点是一个全新的节点，我们应该将其挂载到容器中，不过应该将其挂载到哪里呢？稍作分析即可得出结论，由于 "),a("code",[t._v("li-d")]),t._v(" 节点的位置索引是 "),a("code",[t._v("newStartIdx")]),t._v("，这说明 "),a("code",[t._v("li-d")]),t._v(" 节点是当前这一轮比较中的“第一个”节点，所以只要把它挂载到位于 "),a("code",[t._v("oldStartIdx")]),t._v(" 位置的节点所对应的真实 DOM 前面就可以了，即 "),a("code",[t._v("oldStartVNode.el")]),t._v("，我们只需要增加一行代码即可实现该功能：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-js extra-class"},[a("div",{staticClass:"highlight-lines"},[a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("br"),a("br"),a("br"),a("br"),a("br")]),a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("oldStartIdx "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" oldEndIdx "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" newStartIdx "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" newEndIdx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("oldStartVNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    oldStartVNode "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" prevChildren"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("oldStartIdx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("oldEndVNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    oldEndVNode "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" prevChildren"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("oldEndIdx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("oldStartVNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" newStartVNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("oldEndVNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" newEndVNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("oldStartVNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" newEndVNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("oldEndVNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" newStartVNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" idxInOld "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" prevChildren"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("findIndex")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("node")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" node"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" newStartVNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("idxInOld "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" vnodeToMove "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" prevChildren"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("idxInOld"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("patch")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("vnodeToMove"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" newStartVNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" container"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n      prevChildren"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("idxInOld"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),t._v("\n      container"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("insertBefore")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("vnodeToMove"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("el"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" oldStartVNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("el"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 使用 mount 函数挂载新节点")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("mount")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("newStartVNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" container"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" oldStartVNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("el"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    newStartVNode "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" nextChildren"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("newStartIdx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("如上高亮代码所示，如果条件 "),a("code",[t._v("idxInOld >= 0")]),t._v(" 不成立，则说明 "),a("code",[t._v("newStartVNode")]),t._v(" 是一个全新的节点，我们添加了 "),a("code",[t._v("else")]),t._v(" 语句块用来处理全新的节点，在 "),a("code",[t._v("else")]),t._v(" 语句块内调用 "),a("code",[t._v("mount")]),t._v(" 函数挂载该全新的节点，根据上面的分析，我们只需要把该节点挂载到 "),a("code",[t._v("oldStartVNode.el")]),t._v(" 之前即可，所以我们传递给 "),a("code",[t._v("mount")]),t._v(" 函数的第四个参数就是 "),a("code",[t._v("oldStartVNode.el")]),t._v("。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("但这么做真的就完美了吗？不是的，来看下面这个例子，我们更换新 "),s("code",[this._v("children")]),this._v(" 中节点的顺序，如下图所示：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("与之前的案例不同，在之前的案例中新 "),a("code",[t._v("children")]),t._v(" 中节点的顺序为 "),a("code",[t._v("li-d")]),t._v("、"),a("code",[t._v("li-a")]),t._v("、"),a("code",[t._v("li-c")]),t._v(" 最后是 "),a("code",[t._v("li-b")]),t._v("，我们观察上图可以发现，本例中新 "),a("code",[t._v("children")]),t._v(" 的节点顺序为 "),a("code",[t._v("li-d")]),t._v("、"),a("code",[t._v("li-a")]),t._v("、"),a("code",[t._v("li-b")]),t._v(" 最后是 "),a("code",[t._v("li-c")]),t._v("，那么顺序的不同会对结果产生影响吗？想弄明白这个问题很简单，我们只需要按照双端比较算法的思路来模拟执行一次即可得出结论：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ul",[a("li",[t._v("第一步：拿旧 "),a("code",[t._v("children")]),t._v(" 中的 "),a("code",[t._v("li-a")]),t._v(" 和新 "),a("code",[t._v("children")]),t._v(" 中的 "),a("code",[t._v("li-d")]),t._v(" 进行比对，由于二者 "),a("code",[t._v("key")]),t._v(" 值不同，所以不可复用，什么都不做。")]),t._v(" "),a("li",[t._v("第二步：拿旧 "),a("code",[t._v("children")]),t._v(" 中的 "),a("code",[t._v("li-c")]),t._v(" 和新 "),a("code",[t._v("children")]),t._v(" 中的 "),a("code",[t._v("li-c")]),t._v(" 进行比对，此时，二者拥有相同的 "),a("code",[t._v("key")]),t._v(" 值。")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("在第二步中找到了可复用节点，接着使用 "),s("code",[this._v("patch")]),this._v(" 函数对该节点进行更新，同时将相应的位置索引下移一位，如下图所示：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("由上图可知，此时的 "),a("code",[t._v("oldStartIdx")]),t._v(" 与 "),a("code",[t._v("oldEndIdx")]),t._v(" 已经重合，它们的值都是 "),a("code",[t._v("0")]),t._v("，但是此时仍然满足循环条件，所以比对不会停止，会继续下一轮的比较。在新的一轮比较中，仍然会在第二步找到可复用的节点，所以在这一轮更新完成之后 "),a("code",[t._v("oldEndIdx")]),t._v(" 将比 "),a("code",[t._v("oldStartIdx")]),t._v(" 的值要小，如下图所示：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("此时 "),a("code",[t._v("oldEndIdx")]),t._v(" 的值将变成 "),a("code",[t._v("-1")]),t._v("，它要小于 "),a("code",[t._v("oldStartIdx")]),t._v(" 的值，这时循环的条件不在满足，意味着更新完成。然而通过上图可以很容易的发现 "),a("code",[t._v("li-d")]),t._v(" 节点被遗漏了，它没有得到任何的处理，通过这个案例我们意识到了之前的算法是存在缺陷的，为了弥补这个缺陷，我们需要在循环终止之后，对 "),a("code",[t._v("oldEndIdx")]),t._v(" 和 "),a("code",[t._v("oldStartIdx")]),t._v(" 的值进行检查，如果在循环结束之后 "),a("code",[t._v("oldEndIdx")]),t._v(" 的值小于 "),a("code",[t._v("oldStartIdx")]),t._v(" 的值则说明新的 "),a("code",[t._v("children")]),t._v(" 中存在"),a("strong",[t._v("还没有被处理的全新节点")]),t._v("，这时我们应该调用 "),a("code",[t._v("mount")]),t._v(" 函数将其挂载到容器元素中，观察上图可知，我们只需要把这些全新的节点添加到 "),a("code",[t._v("oldStartIdx")]),t._v(" 索引所指向的节点之前即可，如下高亮代码所示：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-js extra-class"},[a("div",{staticClass:"highlight-lines"},[a("br"),a("br"),a("br"),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("br")]),a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("oldStartIdx "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" oldEndIdx "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" newStartIdx "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" newEndIdx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("oldEndIdx "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" oldStartIdx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 添加新节点")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" newStartIdx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" newEndIdx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("mount")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nextChildren"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" container"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" oldStartVNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("el"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("我们在循环结束之后，立即判断 "),a("code",[t._v("oldEndIdx")]),t._v(" 的值是否小于 "),a("code",[t._v("oldStartIdx")]),t._v(" 的值，如果条件成立，则需要使用 "),a("code",[t._v("for")]),t._v(" 循环把所有位于 "),a("code",[t._v("newStartIdx")]),t._v(" 到 "),a("code",[t._v("newEndIdx")]),t._v(" 之间的元素都当做全新的节点添加到容器元素中，这样我们就完整的实现了完整的添加新节点的功能。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"移除不存在的元素-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#移除不存在的元素-2"}},[this._v("#")]),this._v(" 移除不存在的元素")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("观察上图可以发现，在新 "),s("code",[this._v("children")]),this._v(" 中 "),s("code",[this._v("li-b")]),this._v(" 节点已经不存在了，所以完整的更新过程应该包含："),s("strong",[this._v("移除已不存在节点所对应真实 DOM 的功能")]),this._v("。为了找到哪些节点需要移除，我们首先还是按照双端比较的算法步骤模拟执行一下即可：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ul",[a("li",[t._v("第一步：拿旧 "),a("code",[t._v("children")]),t._v(" 中的 "),a("code",[t._v("li-a")]),t._v(" 和新 "),a("code",[t._v("children")]),t._v(" 中的 "),a("code",[t._v("li-a")]),t._v(" 进行比对，此时，二者拥有相同的 "),a("code",[t._v("key")]),t._v(" 值。")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("在第一轮的第一步比对中，我们就找到了可复用节点，所以此时会调用 "),s("code",[this._v("patch")]),this._v(" 函数更新该节点，并更新相应的索引值，可以用下图表示这一轮更新完成之后算法所处的状态：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("这时 "),s("code",[this._v("newStartIdx")]),this._v(" 和 "),s("code",[this._v("newEndIdx")]),this._v(" 的值相等，都是 "),s("code",[this._v("1")]),this._v("，不过循环的条件仍然满足，所以会立即进行下一轮比较：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ul",[a("li",[t._v("第一步：拿旧 "),a("code",[t._v("children")]),t._v(" 中的 "),a("code",[t._v("li-b")]),t._v(" 和新 "),a("code",[t._v("children")]),t._v(" 中的 "),a("code",[t._v("li-c")]),t._v(" 进行比对，由于二者 "),a("code",[t._v("key")]),t._v(" 值不同，所以不可复用，什么都不做。")]),t._v(" "),a("li",[t._v("第二步：拿旧 "),a("code",[t._v("children")]),t._v(" 中的 "),a("code",[t._v("li-c")]),t._v(" 和新 "),a("code",[t._v("children")]),t._v(" 中的 "),a("code",[t._v("li-c")]),t._v(" 进行比对，此时，二者拥有相同的 "),a("code",[t._v("key")]),t._v(" 值。")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("在第二步的比对中找到了可复用节点 "),s("code",[this._v("li-c")]),this._v("，接着更新该节点，并将 "),s("code",[this._v("oldEndIdx")]),this._v(" 和 "),s("code",[this._v("newEndIdx")]),this._v(" 分别前移一位，最终结果如下：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("由于此时 "),a("code",[t._v("newEndIdx")]),t._v(" 的值小于 "),a("code",[t._v("newStartIdx")]),t._v(" 的值，所以循环将终止，但是通过上图可以发现，旧 "),a("code",[t._v("children")]),t._v(" 中的 "),a("code",[t._v("li-b")]),t._v(" 节点没有得到被处理的机会，我们应该将其移除才行，然后本次循环结束之后并不满足条件 "),a("code",[t._v("oldEndIdx < oldStartIdx")]),t._v(" 而是满足条件 "),a("code",[t._v("newEndIdx < newStartIdx")]),t._v("，基于此，我们可以认为"),a("strong",[t._v("循环结束后，一旦满足条件 "),a("code",[t._v("newEndIdx < newStartId")]),t._v(" 则说明有元素需要被移除")]),t._v("。我们增加如下代码来实现该功能：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-js extra-class"},[a("div",{staticClass:"highlight-lines"},[a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("br"),a("br")]),a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("oldStartIdx "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" oldEndIdx "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" newStartIdx "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" newEndIdx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("oldEndIdx "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" oldStartIdx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 添加新节点")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" newStartIdx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" newEndIdx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("mount")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nextChildren"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" container"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" oldStartVNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("el"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("newEndIdx "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" newStartIdx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 移除操作")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" oldStartIdx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" oldEndIdx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    container"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("removeChild")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("prevChildren"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("el"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("如上高亮代码所示，增加 "),a("code",[t._v("else...if")]),t._v(" 语句块，用来处理当 "),a("code",[t._v("newEndIdx < newStartIdx")]),t._v(" 时的情况，我们同样开启一个 "),a("code",[t._v("for")]),t._v(" 循环，把所有位于 "),a("code",[t._v("oldStartIdx")]),t._v(" 和 "),a("code",[t._v("oldEndIdx")]),t._v(" 之间的节点所对应的真实 DOM 全部移除即可。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"inferno-所采用的核心-diff-算法及原理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#inferno-所采用的核心-diff-算法及原理"}},[this._v("#")]),this._v(" inferno 所采用的核心 Diff 算法及原理")])},function(){var t=this.$createElement,s=this._self._c||t;return s("strong",[this._v("在创建 "),s("code",[this._v("VNode")]),this._v(" 时就确定其类型，以及在 "),s("code",[this._v("mount/patch")]),this._v(" 的过程中采用位运算来判断一个 "),s("code",[this._v("VNode")]),this._v(" 的类型")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"相同的前置和后置元素"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#相同的前置和后置元素"}},[this._v("#")]),this._v(" 相同的前置和后置元素")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("实际上本节介绍的 "),s("code",[this._v("Diff")]),this._v(" 算法最早应用于两个不同文本之间的差异比较，在文本 "),s("code",[this._v("Diff")]),this._v(" 中，真正进行核心的 "),s("code",[this._v("Diff")]),this._v(" 算法之前，会有一个预处理的过程，例如可以先对两个文本进行“相等”比较：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("text1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" text2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v("\n")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("如果两个文本相等，则无需进行真正的 "),a("code",[t._v("Diff")]),t._v("，预处理的好处之一就是"),a("strong",[t._v("在某些情况下能够避免 "),a("code",[t._v("Diff")]),t._v(" 算法的执行")]),t._v("，还有比这更加高效的方式吗？当然，这是一个简单的情形，除此之外，在文本的 "),a("code",[t._v("Diff")]),t._v(" 中还有其他的预处理过程，其中就包含：去除"),a("strong",[t._v("相同的前缀和后缀")]),t._v("。什么意思呢？假设我们有如下两个文本：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v("TEXT1: I use vue for app development\ntext2: I use react for app development\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("所以真正需要进行 "),s("code",[this._v("Diff")]),this._v(" 的部分就变成了：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v("text1: vue\ntext2: react\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v("text1: I like you\ntext2: I like you too\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v("text1:\ntext2: too\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("所以当预处理结束之后，如果 "),s("code",[this._v("text1")]),this._v(" 为空且 "),s("code",[this._v("text2")]),this._v(" 不为空，则可以认为这是一个文本插入，相反的，如果将这两个文本互换位置就是一个文本删除的案例：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v("text1: I like you too\ntext2: I like you\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v("text1: too\ntext2:\n")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("很显然，该预处理过程在上例的情况下能够避免 "),a("code",[t._v("Diff")]),t._v(" 算法的执行，从而提高 "),a("code",[t._v("Diff")]),t._v(" 效率。当然，换一个角度来看的话，这本身也是 "),a("code",[t._v("Diff")]),t._v(" 策略的一部分，不过这显然要更高效。所以我们能否将此预处理步骤应用到 "),a("code",[t._v("VNode")]),t._v(" 的 "),a("code",[t._v("Diff")]),t._v(" 中呢？当然可以，来看下面的例子：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("如上图所示，新旧 "),s("code",[this._v("children")]),this._v(" 拥有相同的前缀节点和后缀节点，对于前缀节点，我们可以建立一个索引，指向新旧 "),s("code",[this._v("children")]),this._v(" 中的第一个节点，并逐步向后遍历，直到遇到两个拥有不同 "),s("code",[this._v("key")]),this._v(" 值的节点为止，如下代码所示：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 更新相同的前缀节点")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// j 为指向新旧 children 中第一个节点的索引")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" j "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" prevVNode "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" prevChildren"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" nextVNode "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" nextChildren"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// while 循环向后遍历，直到遇到拥有不同 key 值的节点为止")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("prevVNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" nextVNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 调用 patch 函数更新")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("patch")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("prevVNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" nextVNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" container"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  j"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("\n  prevVNode "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" prevChildren"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  nextVNode "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" nextChildren"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("这里大家需要注意的是，当 "),a("code",[t._v("while")]),t._v(" 循环终止时，索引 "),a("code",[t._v("j")]),t._v(" 的值为 "),a("code",[t._v("1")]),t._v("。接着，我们需要处理的是相同的后缀节点，由于新旧 "),a("code",[t._v("children")]),t._v(" 中节点的数量可能不同，所以我们需要两个索引分别指向新旧 "),a("code",[t._v("children")]),t._v(" 的最后一个节点，并逐步向前遍历，直到遇到两个拥有不同 "),a("code",[t._v("key")]),t._v(" 值的节点为止，如下代码所示：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 更新相同的后缀节点")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 指向旧 children 最后一个节点的索引")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" prevEnd "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" prevChildren"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 指向新 children 最后一个节点的索引")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" nextEnd "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" nextChildren"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n\nprevVNode "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" prevChildren"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("prevEnd"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\nnextVNode "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" nextChildren"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("nextEnd"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// while 循环向前遍历，直到遇到拥有不同 key 值的节点为止")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("prevVNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" nextVNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 调用 patch 函数更新")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("patch")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("prevVNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" nextVNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" container"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  prevEnd"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("\n  nextEnd"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("\n  prevVNode "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" prevChildren"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("prevEnd"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  nextVNode "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" nextChildren"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("nextEnd"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("同样需要注意的是，在这一步更新完成之后 "),a("code",[t._v("prevEnd")]),t._v(" 的值为 "),a("code",[t._v("0")]),t._v("，"),a("code",[t._v("nextEnd")]),t._v(" 的值为 "),a("code",[t._v("1")]),t._v("。实际上三个索引 "),a("code",[t._v("j")]),t._v("、"),a("code",[t._v("prevEnd")]),t._v(" 和 "),a("code",[t._v("nextEnd")]),t._v(" 的值至关重要，它们之间的大小关系反映了新旧 "),a("code",[t._v("children")]),t._v(" 的节点状况。前面我们在讲解文本 "),a("code",[t._v("Diff")]),t._v(" 的时候曾说过，当“去掉”相同的前缀和后缀之后，如果旧文本为空，且新文本不为空，则说明有新的文本内容被添加，反之则说明有旧的文本被移除。现在三个索引的值如下：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v("j: 1\nprevEnd: 0\nnextEnd: 1\n")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("我们发现 "),a("code",[t._v("j > prevEnd")]),t._v(" 并且 "),a("code",[t._v("j <= nextEnd")]),t._v("，这说明当新旧 "),a("code",[t._v("children")]),t._v(" 中相同的前缀和后缀被更新之后，旧 "),a("code",[t._v("children")]),t._v(" 中的节点已经被更新完毕了，而新 "),a("code",[t._v("children")]),t._v(" 中仍然有剩余节点，通过上图可以发现，新 "),a("code",[t._v("children")]),t._v(" 中的 "),a("code",[t._v("li-d")]),t._v(" 节点，就是这个剩余的节点。实际上新 "),a("code",[t._v("children")]),t._v(" 中位于 "),a("code",[t._v("j")]),t._v(" 到 "),a("code",[t._v("nextEnd")]),t._v(" 之间的所有节点都应该是新插入的节点：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("那么应该将这些新的节点插入到什么位置呢？观察上图，从新 "),a("code",[t._v("children")]),t._v(" 中的节点顺序可以发现，新的节点都出现在 "),a("code",[t._v("li-b")]),t._v(" 节点的前面，所以我们可以使用一个循环遍历索引 "),a("code",[t._v("j -> nextEnd")]),t._v(" 之间的节点，并逐个将其插入到 "),a("code",[t._v("li-b")]),t._v(" 节点之前，这样当循环结束之后，新的节点就被插入到了正确的位置。我们还能发现 "),a("code",[t._v("li-b")]),t._v(" 节点的位置可以用 "),a("code",[t._v("nextEnd + 1")]),t._v(" 表示，最终我们可以使用如下代码来实现节点的插入：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 满足条件，则说明从 j -> nextEnd 之间的节点应作为新节点插入")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("j "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" prevEnd "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" j "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" nextEnd"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 所有新节点应该插入到位于 nextPos 位置的节点的前面")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" nextPos "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" nextEnd "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" refNode "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("\n    nextPos "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" nextChildren"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" nextChildren"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("nextPos"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("el "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 采用 while 循环，调用 mount 函数挂载节点")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("j "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" nextEnd"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("mount")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nextChildren"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" container"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" refNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v("j: 1\nprevEnd: 1\nnextEnd: 0\n")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("这时条件 "),a("code",[t._v("j > nextEnd")]),t._v(" 并且 "),a("code",[t._v("j <= prevEnd")]),t._v(" 成立，通过上图可以很容的发现，旧 "),a("code",[t._v("children")]),t._v(" 中的 "),a("code",[t._v("li-b")]),t._v(" 节点应该被移除，实际上更加通用的规则应该是：在旧 "),a("code",[t._v("children")]),t._v(" 中有位于索引 "),a("code",[t._v("j")]),t._v(" 到 "),a("code",[t._v("prevEnd")]),t._v(" 之间的节点，都应该被移除。如下图所示：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-js extra-class"},[a("div",{staticClass:"highlight-lines"},[a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("br"),a("br")]),a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("j "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" prevEnd "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" j "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" nextEnd"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// j -> nextEnd 之间的节点应该被添加")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" nextPos "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" nextEnd "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" refNode "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("\n    nextPos "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" nextChildren"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" nextChildren"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("nextPos"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("el "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("j "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" nextEnd"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("mount")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nextChildren"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" container"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" refNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("j "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" nextEnd"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// j -> prevEnd 之间的节点应该被移除")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("j "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" prevEnd"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    container"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("removeChild")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("prevChildren"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("el"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-js extra-class"},[a("div",{staticClass:"highlight-lines"},[a("br"),a("br"),a("br"),a("br"),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("br"),a("br"),a("br"),a("br"),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("br"),a("br"),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("br"),a("br"),a("br"),a("br")]),a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// while 循环向后遍历，直到遇到拥有不同 key 值的节点为止")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("prevVNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" nextVNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 调用 patch 函数更新")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n  j"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// while 循环向前遍历，直到遇到拥有不同 key 值的节点为止")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("prevVNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" nextVNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 调用 patch 函数更新")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n  prevEnd"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("\n  nextEnd"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 满足条件，则说明从 j -> nextEnd 之间的节点应作为新节点插入")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("j "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" prevEnd "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" j "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" nextEnd"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// j -> nextEnd 之间的节点应该被添加")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("j "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" nextEnd"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// j -> prevEnd 之间的节点应该被移除")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("观察如上高亮的代码，我们发现，在两个 "),a("code",[t._v("while")]),t._v(" 循环中，索引 "),a("code",[t._v("j")]),t._v(" 和 索引 "),a("code",[t._v("prevEnd")]),t._v("、"),a("code",[t._v("nextEnd")]),t._v(" 是以“从两端向中间靠拢”的趋势在变化的，而在两个 "),a("code",[t._v("while")]),t._v(" 循环结束之后，我们会根据这三个索引的大小关系来决定应该做什么样的操作。现在我们思考一个问题，假设在第一个 "),a("code",[t._v("while")]),t._v(" 循环结束之后，索引 "),a("code",[t._v("j")]),t._v(" 的值已经大于 "),a("code",[t._v("prevEnd")]),t._v(" 或 "),a("code",[t._v("nextEnd")]),t._v("，那么还有必须执行第二个 "),a("code",[t._v("while")]),t._v(" 循环吗？答案是没有必要，这是因为一旦索引 "),a("code",[t._v("j")]),t._v(" 大于 "),a("code",[t._v("prevEnd")]),t._v(" 则说明旧 "),a("code",[t._v("children")]),t._v(" 中的所有节点都已经参与了 "),a("code",[t._v("patch")]),t._v("，类似的，如果索引 "),a("code",[t._v("j")]),t._v(" 大于 "),a("code",[t._v("nextEnd")]),t._v(" 则说明新 "),a("code",[t._v("children")]),t._v(" 中的所有节点都已经参与了 "),a("code",[t._v("patch")]),t._v("，这时当然没有必要再执行后续的操作了。所以出于性能的考虑，我们应该避免没有必要的代码执行，为了达到目的，可以使用 "),a("code",[t._v("javascript")]),t._v(" 中的 "),a("code",[t._v("label")]),t._v(" 语句，如下高亮代码所示：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-js extra-class"},[a("div",{staticClass:"highlight-lines"},[a("div",{staticClass:"highlighted"},[t._v(" ")]),a("br"),a("br"),a("br"),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("br"),a("br"),a("br"),a("br"),a("br")]),a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("outer"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("prevVNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" nextVNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("patch")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("prevVNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" nextVNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" container"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    j"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("j "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" prevEnd "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" j "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" nextEnd"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),t._v(" outer\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    prevVNode "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" prevChildren"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    nextVNode "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" nextChildren"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 更新相同的后缀节点")]),t._v("\n  prevVNode "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" prevChildren"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("prevEnd"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  nextVNode "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" nextChildren"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("nextEnd"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("prevVNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" nextVNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("patch")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("prevVNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" nextVNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" container"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    prevEnd"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("\n    nextEnd"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("j "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" prevEnd "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" j "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" nextEnd"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),t._v(" outer\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    prevVNode "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" prevChildren"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("prevEnd"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    nextVNode "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" nextChildren"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("nextEnd"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("我们定义了 "),a("code",[t._v("label")]),t._v(" 名字为 "),a("code",[t._v("outer")]),t._v(" 的 "),a("code",[t._v("label")]),t._v(" 语句块，并分别在两个 "),a("code",[t._v("while")]),t._v(" 循环中添加了判断语句，无论在哪个循环中，只要索引 "),a("code",[t._v("j")]),t._v(" 的值大于了 "),a("code",[t._v("prevEnd")]),t._v(" 或 "),a("code",[t._v("nextEnd")]),t._v(" 二者之一，我们就 "),a("code",[t._v("break")]),t._v(" 该语句块，从而避免了无用的代码执行。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"判断是否需要进行-dom-移动"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#判断是否需要进行-dom-移动"}},[this._v("#")]),this._v(" 判断是否需要进行 DOM 移动")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("刚刚我们讲解了一个很重要的预处理思路：“去掉”相同的前置/后置节点。并且我们分析了在一些情况下这种预处理操作能够避免真正 "),s("code",[this._v("Diff")]),this._v(" 算法的执行：通过判断索引的大小关系，能够提前知道哪些元素被添加，哪些元素被移除。但这毕竟属于一种特殊情况，大部分情况下可能未必如此理想，来看如下案例：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("观察上图中新旧 "),a("code",[t._v("children")]),t._v(" 中节点的顺序，我们发现，这个案例在应用预处理步骤之后，只有 "),a("code",[t._v("li-a")]),t._v(" 节点和 "),a("code",[t._v("li-e")]),t._v(" 节点能够被提前 "),a("code",[t._v("patch")]),t._v("。换句话说在这种情况下没有办法简单的通过预处理就能够结束 "),a("code",[t._v("Diff")]),t._v(" 逻辑。这时我们就需要进行下一步操作，实际上无论是 "),a("code",[t._v("React")]),t._v(" 的 "),a("code",[t._v("Diff")]),t._v(" 算法，还是 "),a("code",[t._v("Vue2(snabbdom)")]),t._v(" 的 "),a("code",[t._v("Diff")]),t._v(" 算法，其重点无非就是："),a("strong",[t._v("判断是否有节点需要移动，以及应该如何移动")]),t._v("和"),a("strong",[t._v("寻找出那些需要被添加或移除")]),t._v("的节点，而本节我们所讲解的算法也不例外，所以接下来的任务就是：判断那些节点需要移动，以及如何移动。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("观察上图可以发现，此时索引 "),s("code",[this._v("j")]),this._v(" 既不大于 "),s("code",[this._v("prevEnd")]),this._v(" 也不大于 "),s("code",[this._v("nextEnd")]),this._v("，所以如下代码将得不到执行：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 满足条件，则说明从 j -> nextEnd 之间的节点应作为新节点插入")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("j "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" prevEnd "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" j "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" nextEnd"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// j -> nextEnd 之间的节点应该被添加")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("j "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" nextEnd"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// j -> prevEnd 之间的节点应该被移除")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("我们需要为这段代码添加 "),s("code",[this._v("else")]),this._v(" 语句块，用来处理该案例的情况，如下高亮代码所示：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-js extra-class"},[a("div",{staticClass:"highlight-lines"},[a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("br")]),a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 满足条件，则说明从 j -> nextEnd 之间的节点应作为新节点插入")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("j "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" prevEnd "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" j "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" nextEnd"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// j -> nextEnd 之间的节点应该被添加")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("j "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" nextEnd"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// j -> prevEnd 之间的节点应该被移除")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 在这里编写处理逻辑")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("知道了应该在哪里编写处理逻辑，那么接下来我们就讲解一下该算法的思路。首先，我们需要构造一个数组 "),s("code",[this._v("source")]),this._v("，该数组的长度等于新 "),s("code",[this._v("children")]),this._v(" 在经过预处理之后剩余未处理节点的数量，并且该数组中每个元素的初始值为 "),s("code",[this._v("-1")]),this._v("，如下图所示：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("我们可以通过如下代码完成 "),s("code",[this._v("source")]),this._v(" 数组的构造：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-js extra-class"},[a("div",{staticClass:"highlight-lines"},[a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("br"),a("br")]),a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("j "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" prevEnd "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" j "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" nextEnd"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("j "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" nextEnd"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 构造 source 数组")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" nextLeft "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" nextEnd "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" j "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 新 children 中剩余未处理节点的数量")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" source "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" nextLeft"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    source"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("push")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("那么这个数组的作用是什么呢？通过上图可以发现，该数组中的每一个元素分别与新 "),a("code",[t._v("children")]),t._v(" 中剩余未处理的节点对应，实际上 "),a("code",[t._v("source")]),t._v(" 数组将用来存储"),a("strong",[t._v("新 "),a("code",[t._v("children")]),t._v(" 中的节点在旧 "),a("code",[t._v("children")]),t._v(" 中的位置，后面将会使用它计算出一个最长递增子序列，并用于 DOM 移动")]),t._v("。如下图所示：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("我们可以通过两层 "),s("code",[this._v("for")]),this._v(" 循环来完成这个工作，外层循环用于遍历旧 "),s("code",[this._v("children")]),this._v("，内层循环用于遍历新 "),s("code",[this._v("children")]),this._v("：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" prevStart "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" j\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" nextStart "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" j\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 遍历旧 children")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" prevStart"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" prevEnd"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" prevVNode "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" prevChildren"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 遍历新 children")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" k "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" nextStart"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" k "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" nextEnd"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" k"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" nextVNode "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" nextChildren"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("k"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 找到拥有相同 key 值的可复用节点")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("prevVNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" nextVNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// patch 更新")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("patch")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("prevVNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" nextVNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" container"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 更新 source 数组")]),t._v("\n      source"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("k "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" nextStart"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" i\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("如上代码所示，外层循环逐个从旧 "),a("code",[t._v("children")]),t._v(" 中取出未处理的节点，并尝试在新 "),a("code",[t._v("children")]),t._v(" 中寻找拥有相同 "),a("code",[t._v("key")]),t._v(" 值的可复用节点，一旦找到了可复用节点，则调用 "),a("code",[t._v("patch")]),t._v(" 函数更新之。接着更新 "),a("code",[t._v("source")]),t._v(" 数组中对应位置的值，这里需要注意的是，由于 "),a("code",[t._v("k - nextStart")]),t._v(" 的值才是正确的位置索引，而非 "),a("code",[t._v("k")]),t._v(" 本身，并且外层循环中变量 "),a("code",[t._v("i")]),t._v(" 的值就代表了该节点在旧 "),a("code",[t._v("children")]),t._v(" 中的位置，所以直接将 "),a("code",[t._v("i")]),t._v(" 赋值给 "),a("code",[t._v("source[k - nextStart]")]),t._v(" 即可达到目的，最终的效果就如上图中所展示的那样。可以看到 "),a("code",[t._v("source")]),t._v(" 数组的第四个元素值仍然为初始值 "),a("code",[t._v("-1")]),t._v("，这是因为"),a("strong",[t._v("新 "),a("code",[t._v("children")]),t._v(" 中的 "),a("code",[t._v("li-g")]),t._v(" 节点不存在于旧 "),a("code",[t._v("children")]),t._v(" 中")]),t._v("。除此之外，还有一件很重要的事儿需要做，即判断是否需要移动节点，判断的方式类似于 "),a("code",[t._v("React")]),t._v(" 所采用的方式，如下高亮代码所示：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-js extra-class"},[a("div",{staticClass:"highlight-lines"},[a("br"),a("br"),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("br"),a("br"),a("br"),a("br")]),a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" prevStart "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" j\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" nextStart "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" j\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" moved "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" pos "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" prevStart"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" prevEnd"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" prevVNode "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" prevChildren"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" k "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" nextStart"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" k "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" nextEnd"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" k"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" nextVNode "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" nextChildren"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("k"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("prevVNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" nextVNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// patch 更新")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("patch")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("prevVNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" nextVNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" container"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 更新 source 数组")]),t._v("\n      source"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("k "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" nextStart"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" i\n      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 判断是否需要移动")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("k "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" pos"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        moved "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        pos "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" k\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("变量 "),a("code",[t._v("k")]),t._v(" 代表我们在遍历新 "),a("code",[t._v("children")]),t._v(" 中遇到的节点的位置索引，变量 "),a("code",[t._v("pos")]),t._v(" 用来存储遇到的位置索引的最大值，一旦发现后来遇到索引比之前遇到的索引要小，即 "),a("code",[t._v("k < pos")]),t._v("，则说明需要移动操作，这时我们更新变量 "),a("code",[t._v("moved")]),t._v(" 的值为 "),a("code",[t._v("true")]),t._v("，"),a("code",[t._v("moved")]),t._v(" 变量将会在后面使用。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("不过在进一步讲解之前，我们需要回头思考一下上面的代码存在怎样的问题？上面的代码中我们采用两层嵌套的循环，其时间复杂度为 "),a("code",[t._v("O(n1 * n2)")]),t._v("，其中 "),a("code",[t._v("n1")]),t._v(" 和 "),a("code",[t._v("n2")]),t._v(" 为新旧 "),a("code",[t._v("children")]),t._v(" 中节点的数量，我们也可以使用 "),a("code",[t._v("O(n^2)")]),t._v(" 来表示，当新旧 "),a("code",[t._v("children")]),t._v(" 中节点的数量较多时，则两层嵌套的循环会带来性能的问题，出于优化的目的，我们可以为新的 "),a("code",[t._v("children")]),t._v(" 中的节点构建一个 "),a("code",[t._v("key")]),t._v(" 到 "),a("code",[t._v("位置索引")]),t._v(" 的"),a("strong",[t._v("索引表")]),t._v("，如下图所示：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[a("code",[t._v("Index Map")]),t._v(" 中的键是节点的 "),a("code",[t._v("key")]),t._v("，值是节点在新 "),a("code",[t._v("children")]),t._v(" 中的位置索引，由于数据结构带来的优势，使得我们能够非常快速的定位旧 "),a("code",[t._v("children")]),t._v(" 中的节点在新 "),a("code",[t._v("children")]),t._v(" 中的位置，落实的代码如下：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" prevStart "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" j\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" nextStart "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" j\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" moved "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" pos "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 构建索引表")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" keyIndex "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" nextStart"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" nextEnd"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  keyIndex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("nextChildren"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" i\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 遍历旧 children 的剩余未处理节点")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" prevStart"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" prevEnd"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  prevVNode "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" prevChildren"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 通过索引表快速找到新 children 中具有相同 key 的节点的位置")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" k "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" keyIndex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("prevVNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" k "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'undefined'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    nextVNode "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" nextChildren"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("k"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// patch 更新")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("patch")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("prevVNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" nextVNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" container"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 更新 source 数组")]),t._v("\n    source"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("k "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" nextStart"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" i\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 判断是否需要移动")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("k "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" pos"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      moved "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      pos "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" k\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 没找到")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("这是典型的"),a("strong",[t._v("用空间换时间")]),t._v("的方式，复杂度能够降低到 "),a("code",[t._v("O(n)")]),t._v("。但无论采用哪一种方式，最终我们的目的是"),a("strong",[t._v("对新旧 "),a("code",[t._v("children")]),t._v(" 中具有相同 "),a("code",[t._v("key")]),t._v(" 值的节点进行更新，同时检测是否需要移动操作")]),t._v("。在如上代码执行完毕之后，如果发现变量 "),a("code",[t._v("moved")]),t._v(" 的值为 "),a("code",[t._v("true")]),t._v("，则说明需要移动操作。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("另外在上面的代码中，我们试图拿旧 "),a("code",[t._v("children")]),t._v(" 中的节点尝试去新 "),a("code",[t._v("children")]),t._v(" 中寻找具有相同 "),a("code",[t._v("key")]),t._v(" 值的节点，但并非总是能够找得到，当 "),a("code",[t._v("k === 'undefined'")]),t._v(" 时，说明该节点在新 "),a("code",[t._v("children")]),t._v(" 中已经不存在了，这时我们应该将其移除，如下高亮代码所示：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-js extra-class"},[a("div",{staticClass:"highlight-lines"},[a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("br"),a("br"),a("br")]),a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 遍历旧 children 的剩余未处理节点")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" prevStart"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" prevEnd"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  prevVNode "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" prevChildren"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 通过索引表快速找到新 children 中具有相同 key 的节点的位置")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" k "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" keyIndex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("prevVNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" k "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'undefined'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 没找到，说明旧节点在新 children 中已经不存在了，应该移除")]),t._v("\n    container"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("removeChild")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("prevVNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("el"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("除此之外，我们还需要一个数量标识，用来代表"),a("strong",[t._v("已经更新过的节点的数量")]),t._v("。我们知道，"),a("strong",[t._v("已经更新过的节点数量")]),t._v("应该小于新 "),a("code",[t._v("children")]),t._v(" 中需要更新的节点数量，一旦更新过的节点数量超过了新 "),a("code",[t._v("children")]),t._v(" 中需要更新的节点数量，则说明该节点是多余的节点，我们也应该将其移除，如下高亮代码所示：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-js extra-class"},[a("div",{staticClass:"highlight-lines"},[a("div",{staticClass:"highlighted"},[t._v(" ")]),a("br"),a("br"),a("br"),a("br"),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("br"),a("br"),a("br")]),a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" patched "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 遍历旧 children 的剩余未处理节点")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" prevStart"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" prevEnd"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  prevVNode "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" prevChildren"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("patched "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" nextLeft"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 通过索引表快速找到新 children 中具有相同 key 的节点的位置")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" k "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" keyIndex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("prevVNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" k "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'undefined'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      nextVNode "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" nextChildren"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("k"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// patch 更新")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("patch")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("prevVNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" nextVNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" container"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n      patched"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 更新 source 数组")]),t._v("\n      source"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("k "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" nextStart"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" i\n      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 判断是否需要移动")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("k "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" pos"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        moved "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        pos "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" k\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 没找到，说明旧节点在新 children 中已经不存在了，应该移除")]),t._v("\n      container"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("removeChild")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("prevVNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("el"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 多余的节点，应该移除")]),t._v("\n    container"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("removeChild")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("prevVNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("el"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("变量 "),a("code",[t._v("patched")]),t._v(" 将作为数量标识，它的初始值为 "),a("code",[t._v("0")]),t._v("，只有当条件 "),a("code",[t._v("patched < nextLeft")]),t._v(" 不成立时，说明该节点已经不存在与新 "),a("code",[t._v("children")]),t._v(" 中了，是一个多余的节点，于是我们将其移除。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"dom-移动的方式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#dom-移动的方式"}},[this._v("#")]),this._v(" DOM 移动的方式")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("在上一小节，我们的主要目的有两个：1、判断出是否需要进行 DOM 移动操作，所以我们建立了 "),a("code",[t._v("moved")]),t._v(" 变量作为标识，当它的值为 "),a("code",[t._v("true")]),t._v(" 时则说明需要进行 DOM 移动；2、构建 "),a("code",[t._v("source")]),t._v(" 数组，它的长度与“去掉”相同的前置/后置节点后新 "),a("code",[t._v("children")]),t._v(" 中剩余未处理节点的数量相等，并存储着新 "),a("code",[t._v("children")]),t._v(" 中的节点在旧 "),a("code",[t._v("children")]),t._v(" 中位置，后面我们会根据 "),a("code",[t._v("source")]),t._v(" 数组计算出一个最长递增子序列，并用于 DOM 移动操作。如下图所示：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("现在我们已经可以通过判断变量 "),s("code",[this._v("moved")]),this._v(" 的值来确定是否需要进行 DOM 移动操作：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("moved"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果 moved 为真，则需要进行 DOM 移动操作")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("一旦需要进行 DOM 节点的移动，我们首先要做的就是根据 "),s("code",[this._v("source")]),this._v(" 数组计算一个最长递增子序列：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-js extra-class"},[a("div",{staticClass:"highlight-lines"},[a("br"),a("br"),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("br"),a("br")]),a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("moved"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 计算最长递增子序列")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" seq "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("lis")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sources"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// [ 0, 1 ]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"tip custom-block"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("什么是最长递增子序列：给定一个数值序列，找到它的一个子序列，并且子序列中的值是递增的，子序列中的元素在原序列中不一定连续。")]),t._v(" "),a("p",[t._v("例如给定数值序列为：[ 0, 8, 4, 12 ]")]),t._v(" "),a("p",[t._v("那么它的最长递增子序列就是：[0, 8, 12]")]),t._v(" "),a("p",[t._v("当然答案可能有多种情况，例如：[0, 4, 12] 也是可以的")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"tip custom-block"},[s("p",{staticClass:"custom-block-title"},[this._v("TIP")]),this._v(" "),s("p",[this._v("我们会在下一小节讲解 "),s("code",[this._v("lis")]),this._v(" 函数的实现。")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("上面的代码中，我们调用 "),a("code",[t._v("lis")]),t._v(" 函数求出数组 "),a("code",[t._v("source")]),t._v(" 的最长递增子序列为 "),a("code",[t._v("[ 0, 1 ]")]),t._v("。我们知道 "),a("code",[t._v("source")]),t._v(" 数组的值为 "),a("code",[t._v("[2, 3, 1, -1]")]),t._v("，很显然最长递增子序列应该是 "),a("code",[t._v("[ 2, 3 ]")]),t._v("，但为什么计算出的结果是 "),a("code",[t._v("[ 0, 1 ]")]),t._v(" 呢？其实 "),a("code",[t._v("[ 0, 1 ]")]),t._v(" 代表的是最长递增子序列中的各个元素在 "),a("code",[t._v("source")]),t._v(" 数组中的位置索引，如下图所示：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("我们对新 "),a("code",[t._v("children")]),t._v(" 中的剩余未处理节点进行了重新编号，"),a("code",[t._v("li-c")]),t._v(" 节点的位置是 "),a("code",[t._v("0")]),t._v("，以此类推。而最长递增子序列是 "),a("code",[t._v("[ 0, 1 ]")]),t._v(" 这告诉我们："),a("strong",[t._v("新 "),a("code",[t._v("children")]),t._v(" 的剩余未处理节点中，位于位置 "),a("code",[t._v("0")]),t._v(" 和位置 "),a("code",[t._v("1")]),t._v(" 的节点的先后关系与他们在旧 "),a("code",[t._v("children")]),t._v(" 中的先后关系相同")]),t._v("。或者我们可以理解为"),a("strong",[t._v("位于位置 "),a("code",[t._v("0")]),t._v(" 和位置 "),a("code",[t._v("1")]),t._v(" 的节点是不需要被移动的节点")]),t._v("，即上图中 "),a("code",[t._v("li-c")]),t._v(" 节点和 "),a("code",[t._v("li-d")]),t._v(" 节点将在接下来的操作中不会被移动。换句话说只有 "),a("code",[t._v("li-b")]),t._v(" 节点和 "),a("code",[t._v("li-g")]),t._v(" 节点是可能被移动的节点，但是我们发现与 "),a("code",[t._v("li-g")]),t._v(" 节点位置对应的 "),a("code",[t._v("source")]),t._v(" 数组元素的值为 "),a("code",[t._v("-1")]),t._v("，这说明 "),a("code",[t._v("li-g")]),t._v(" 节点应该作为全新的节点被挂载，所以只有 "),a("code",[t._v("li-b")]),t._v(" 节点需要被移动。我们来看下图：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("使用两个索引 "),s("code",[this._v("i")]),this._v(" 和 "),s("code",[this._v("j")]),this._v(" 分别指向新 "),s("code",[this._v("children")]),this._v(" 中剩余未处理节点的最后一个节点和最长递增子序列数组中的最后一个位置，并从后向前遍历，如下代码所示：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("moved"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" seq "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("lis")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("source"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// j 指向最长递增子序列的最后一个值")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" j "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" seq"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 从后向前遍历新 children 中的剩余未处理节点")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" nextLeft "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!==")]),t._v(" seq"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 说明该节点需要移动")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 当 i === seq[j] 时，说明该位置的节点不需要移动")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 并让 j 指向下一个位置")]),t._v("\n      j"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("变量 "),a("code",[t._v("j")]),t._v(" 指向最长递增子序列的最后一个位置，使用 "),a("code",[t._v("for")]),t._v(" 循环从后向前遍历新 "),a("code",[t._v("children")]),t._v(" 中剩余未处理的子节点，这里的技巧在于 "),a("code",[t._v("i")]),t._v(" 的值的范围是 "),a("code",[t._v("0")]),t._v(" 到 "),a("code",[t._v("nextLeft - 1")]),t._v("，这实际上就等价于我们对剩余节点进行了重新编号。接着判断当前节点的位置索引值 "),a("code",[t._v("i")]),t._v(" 是否与子序列中位于 "),a("code",[t._v("j")]),t._v(" 位置的值相等，如果不相等，则说明该节点需要被移动；如果相等则说明该节点不需要被移动，并且会让 "),a("code",[t._v("j")]),t._v(" 指向下一个位置。但是我们观察上图可以发现 "),a("code",[t._v("li-g")]),t._v(" 节点的位置索引是 "),a("code",[t._v("3")]),t._v("，它不等于 "),a("code",[t._v("1")]),t._v("("),a("code",[t._v("seq[j]")]),t._v(")，难道说明 "),a("code",[t._v("li-g")]),t._v(" 节点需要被移动吗？其实不是，我们还可以发现与 "),a("code",[t._v("li-g")]),t._v(" 节点位置对应的 "),a("code",[t._v("source")]),t._v(" 数组中的元素值为 "),a("code",[t._v("-1")]),t._v("，这说明 "),a("code",[t._v("li-g")]),t._v(" 节点应该作为全新的节点挂载，所以我们还需增加一个判断，优先检查一个节点是否是全新的节点：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-js extra-class"},[a("div",{staticClass:"highlight-lines"},[a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br")]),a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("moved"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" seq "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("lis")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("source"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// j 指向最长递增子序列的最后一个值")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" j "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" seq"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 从后向前遍历新 children 中的剩余未处理节点")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" nextLeft "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("source"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 作为全新的节点挂载")]),t._v("\n\n      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 该节点在新 children 中的真实位置索引")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" pos "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" nextStart\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" nextVNode "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" nextChildren"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("pos"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 该节点下一个节点的位置索引")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" nextPos "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" pos "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 挂载")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("mount")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n        nextVNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        container"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        nextPos "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" nextChildren"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length\n          "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" nextChildren"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("nextPos"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("el\n          "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!==")]),t._v(" seq"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 说明该节点需要移动")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 当 i === seq[j] 时，说明该位置的节点不需要移动")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 并让 j 指向下一个位置")]),t._v("\n      j"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("如上代码的关键在于，为了将节点挂载到正确的位置，我们需要找到当前节点的真实位置索引("),a("code",[t._v("i + nextStart")]),t._v(")，以及当前节点的后一个节点，并挂载该节点的前面即可。这样我们就完成了 "),a("code",[t._v("li-g")]),t._v(" 节点的挂载。接着循环会继续执行，索引 "),a("code",[t._v("i")]),t._v(" 将指向下一个位置，即指向 "),a("code",[t._v("li-b")]),t._v(" 节点，如下图所示：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[a("code",[t._v("li-b")]),t._v(" 节点的位置索引 "),a("code",[t._v("i")]),t._v(" 的值为 "),a("code",[t._v("2")]),t._v("，由于 "),a("code",[t._v("source[2]")]),t._v(" 的值为 "),a("code",[t._v("1")]),t._v("，不等于 "),a("code",[t._v("-1")]),t._v("，说明 "),a("code",[t._v("li-b")]),t._v(" 节点不是全新的节点。接着会判断 "),a("code",[t._v("i !== seq[j]")]),t._v("，很显然 "),a("code",[t._v("2 !== 1")]),t._v("，这说明 "),a("code",[t._v("li-b")]),t._v(" 节点是需要被移动的节点，那么应该如何移动呢？很简单，找到 "),a("code",[t._v("li-b")]),t._v(" 节点的后一个节点("),a("code",[t._v("li-g")]),t._v(")，将其插入到 "),a("code",[t._v("li-g")]),t._v(" 节点的前面即可，由于 "),a("code",[t._v("li-g")]),t._v(" 节点已经被挂载，所以我们能够拿到它对应的真实 DOM，如下高亮代码所示：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-js extra-class"},[a("div",{staticClass:"highlight-lines"},[a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br")]),a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("moved"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" seq "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("lis")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("source"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// j 指向最长递增子序列的最后一个值")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" j "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" seq"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 从后向前遍历新 children 中的剩余未处理节点")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" nextLeft "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("source"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 作为全新的节点挂载")]),t._v("\n\n      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 该节点在新 children 中的真实位置索引")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" pos "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" nextStart\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" nextVNode "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" nextChildren"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("pos"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 该节点下一个节点的位置索引")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" nextPos "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" pos "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 挂载")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("mount")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n        nextVNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        container"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        nextPos "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" nextChildren"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length\n          "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" nextChildren"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("nextPos"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("el\n          "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!==")]),t._v(" seq"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 说明该节点需要移动")]),t._v("\n\n      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 该节点在新 children 中的真实位置索引")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" pos "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" nextStart\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" nextVNode "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" nextChildren"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("pos"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 该节点下一个节点的位置索引")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" nextPos "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" pos "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 移动")]),t._v("\n      container"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("insertBefore")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n        nextVNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("el"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        nextPos "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" nextChildren"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length\n          "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" nextChildren"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("nextPos"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("el\n          "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 当 i === seq[j] 时，说明该位置的节点不需要移动")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 并让 j 指向下一个位置")]),t._v("\n      j"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("到了这里 "),s("code",[this._v("li-b")]),this._v(" 节点已经被我们移动到了正确的位置，接着会进行下一次循环，如下图所示：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("此时索引 "),a("code",[t._v("j")]),t._v(" 依然指向子序列的最后一个位置，索引 "),a("code",[t._v("i")]),t._v(" 的值为 "),a("code",[t._v("1")]),t._v("，它指向 "),a("code",[t._v("li-d")]),t._v(" 节点。同样的，由于 "),a("code",[t._v("source[1]")]),t._v(" 的值为 "),a("code",[t._v("3")]),t._v(" 不等于 "),a("code",[t._v("-1")]),t._v("，说明 "),a("code",[t._v("li-d")]),t._v(" 节点也不是全新的节点。接着判断 "),a("code",[t._v("li-d")]),t._v(" 节点的位置索引 "),a("code",[t._v("i")]),t._v(" 的值与子序列 "),a("code",[t._v("seq[j]")]),t._v(" 的值相等，都为 "),a("code",[t._v("1")]),t._v("，这说明 "),a("code",[t._v("li-d")]),t._v(" 节点不需要被移动，此时会把索引 "),a("code",[t._v("j")]),t._v(" 指向下一个位置，结束本次循环并开启下一次循环，下一次循环时的状态如下图所示：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("code",[this._v("li-c")]),this._v(" 节点既不是新节点，也不需要被移动，至此循环结束，更新完成。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"求解最长递增子序列"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#求解最长递增子序列"}},[this._v("#")]),this._v(" 求解最长递增子序列")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("上一小节我们已经介绍了什么是最长递增子序列，同时我们使用 "),s("code",[this._v("lis")]),this._v(" 函数求解一个给定序列的最长递增子序列，本节我们就来探索一下如何求出给定序列的最长递增子序列。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v("[ 0, 8, 4, 12, 2, 10 ]\n")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("实际上，这是一个可以利用动态规划思想求解的问题。动态规划的思想是将一个大的问题分解成多个小的子问题，并尝试得到这些子问题的最优解，子问题的最优解有可能会在更大的问题中被利用，这样通过小问题的最优解最终求得大问题的最优解。那么对于一个序列而言，它的子问题是什么呢？很简单，序列是有长度的，所以我们可以通过序列的长度来划分子问题，如上序列所示，它有 "),a("code",[t._v("6")]),t._v(" 个元素，即该序列的长度为 "),a("code",[t._v("6")]),t._v("，所以我们可不可以将这个序列拆解为长度更短的序列呢？并优先求解这些长度更短的序列的最长递增子序列，进而求得原序列的最长递增子序列？答案是肯定的，假设我们取出原序列的最后一个数字单独作为一个序列，那么该序列就只有一个元素："),a("code",[t._v("[ 10 ]")]),t._v("，很显然这个只有一个元素的序列的长度为 "),a("code",[t._v("1")]),t._v("，已经不能更短了。那么序列 "),a("code",[t._v("[ 10 ]")]),t._v(" 的最长递增子序列是什么呢？因为只有一个元素，所以毫无递增可言，但我们需要一个约定："),a("strong",[t._v("当一个序列只有一个元素时，我们认为其递增子序列就是其本身")]),t._v("，所以序列 "),a("code",[t._v("[ 10 ]")]),t._v(" 的最长递增子序列也是 "),a("code",[t._v("[ 10 ]")]),t._v("，其长度也是 "),a("code",[t._v("1")]),t._v("。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("接着我们将子问题进行扩大，现在我们取出原序列中的最后两个数字作为一个序列，即 "),a("code",[t._v("[ 2, 10 ]")]),t._v("。对于这个序列而言，我们可以把它看作是"),a("strong",[t._v("由序列 "),a("code",[t._v("[ 2 ]")]),t._v(" 和序列 "),a("code",[t._v("[ 10 ]")]),t._v(" 这两个序列所组成的")]),t._v("。并且我们观察这两个序列中的数字，发现满足条件 "),a("code",[t._v("2 < 10")]),t._v("，这满足了递增的要求，所以我们是否可以认为"),a("strong",[t._v("序列 "),a("code",[t._v("[ 2, 10 ]")]),t._v(" 的最长递增子序列等于序列 "),a("code",[t._v("[ 2 ]")]),t._v(" 和序列 "),a("code",[t._v("[ 10 ]")]),t._v(" 这两个序列的递增子序列“之和”")]),t._v("？答案是肯定的，而且庆幸的是，我们在上一步中已经求得了序列 "),a("code",[t._v("[ 10 ]")]),t._v(" 的最长递增子序列的长度是 "),a("code",[t._v("1")]),t._v("，同时序列 "),a("code",[t._v("[ 2 ]")]),t._v(" 也是一个只有一个元素的序列，所以它的最长递增子序列也是它本身，长度也是 "),a("code",[t._v("1")]),t._v("，最后我们将两者做和，可知序列 "),a("code",[t._v("[ 2, 10 ]")]),t._v(" 的最长递增子序列的长度应该是 "),a("code",[t._v("1 + 1 = 2")]),t._v("。实际上我们一眼就能够看得出来序列 "),a("code",[t._v("[ 2, 10 ]")]),t._v(" 的最长递增子序列也是 "),a("code",[t._v("[ 2, 10 ]")]),t._v("，其长度当然为 "),a("code",[t._v("2")]),t._v(" 啦。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("我们为原序列中的每个数字分配一个格子，并且这些格子填充 "),s("code",[this._v("1")]),this._v(" 作为初始值：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("根据前面的分析，我们分别求得子问题的序列 "),a("code",[t._v("[ 10 ]")]),t._v(" 和 "),a("code",[t._v("[ 2, 10 ]")]),t._v(" 的最长递增子序列的长度分别为 "),a("code",[t._v("1")]),t._v(" 和 "),a("code",[t._v("2")]),t._v("，所以我们修改对应的格子中的值，如下：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("如上图所示，原序列中数字 "),a("code",[t._v("10")]),t._v(" 对应的格子的值依然是 "),a("code",[t._v("1")]),t._v("，因为序列 "),a("code",[t._v("[ 10 ]")]),t._v(" 的最长递增子序列的长度是 "),a("code",[t._v("1")]),t._v("。而原序列中数字 "),a("code",[t._v("2")]),t._v(" 对应的格子的值为 "),a("code",[t._v("2")]),t._v("，这是因为序列 "),a("code",[t._v("[ 2, 10 ]")]),t._v(" 的最长递增子序列的长度是 "),a("code",[t._v("2")]),t._v("。所以你应该发现了格子中的值所代表的是"),a("strong",[t._v("以该格子所对应的数字为开头的递增子序列的最大长度")]),t._v("。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("接下来我们继续扩大子问题，我们取出原序列中的最后三个数字作为子问题的序列："),a("code",[t._v("[ 12, 2, 10 ]")]),t._v("。同样的，对于这个序列而言，我们可以把它看作是由序列 "),a("code",[t._v("[ 12 ]")]),t._v(" 和序列 "),a("code",[t._v("[ 2, 10 ]")]),t._v(" 这两个序列所组成的。但是我们发现条件 "),a("code",[t._v("12 < 2")]),t._v(" 并不成立，这说明什么呢？实际上这说明："),a("strong",[t._v("以数字 "),a("code",[t._v("12")]),t._v(" 开头的递增子序列的最大长度就 等于 以数字 "),a("code",[t._v("2")]),t._v(" 开头的递增子序列的最大长度")]),t._v("。这时我们不需要修改原序列中数字 "),a("code",[t._v("12")]),t._v(" 所对应的格子的值，如下图所示该格子的值仍然是 "),a("code",[t._v("1")]),t._v("：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("但是这就结束了吗？还不行，大家思考一下，刚刚我们的判断条件是 "),a("code",[t._v("12 < 2")]),t._v("，这当然是不成立的，但大家不要忘了，序列 "),a("code",[t._v("[ 12, 2, 10 ]")]),t._v(" 中数字 "),a("code",[t._v("2")]),t._v(" 的后面还有一个数字 "),a("code",[t._v("10")]),t._v("，我们是否要继续判断条件 "),a("code",[t._v("12 < 10")]),t._v(" 是否成立呢？当然有必要，道理很简单，假设我们的序列是 "),a("code",[t._v("[ 12, 2, 15 ]")]),t._v(" 的话，你会发现，如果仅仅判断条件 "),a("code",[t._v("12 < 2")]),t._v(" 是不够的，虽然数字 "),a("code",[t._v("12")]),t._v(" 不能和数字 "),a("code",[t._v("2")]),t._v(" 构成递增的关系，但是数字 "),a("code",[t._v("12")]),t._v(" 却可以和数字 "),a("code",[t._v("15")]),t._v(" 构成递增的关系，因此我们得出"),a("strong",[t._v("当填充一个格子的值时，我们应该拿当前格子对应的数字逐个与其后面的所有格子对应的数字进行比较")]),t._v("，而不能仅仅与紧随其后的数字作比较。按照这个思路，我们继续判断条件 "),a("code",[t._v("12 < 10")]),t._v(" 是否成立，很显然是不成立的，所以原序列中数字 "),a("code",[t._v("12")]),t._v(" 对应的格子的值仍然不需要改动，依然是 "),a("code",[t._v("1")]),t._v("。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("接着我们进一步扩大子问题，现在我们抽取原序列中最后的四个数字作为子问题的序列："),a("code",[t._v("[ 4, 12, 2, 10 ]")]),t._v("。还是同样的思路，我们可以把这个序列看作是由序列 "),a("code",[t._v("[ 4 ]")]),t._v(" 和序列 "),a("code",[t._v("[ 12, 2, 10 ]")]),t._v(" 所组成的，又因为条件 "),a("code",[t._v("4 < 12")]),t._v(" 成立，因此我们可以认为子问题序列的最长递增子序列的长度等于"),a("strong",[t._v("序列 "),a("code",[t._v("[ 4 ]")]),t._v(" 的最长递增子序列的长度与以数字 "),a("code",[t._v("12")]),t._v(" 开头的递增子序列的最大长度之和")]),t._v("，序列 "),a("code",[t._v("[ 4 ]")]),t._v(" 的最长递增子序列的长度很显然是 "),a("code",[t._v("1")]),t._v("，而以数字 "),a("code",[t._v("12")]),t._v(" 开头的递增子序列的最大长度实际上就是数字 "),a("code",[t._v("12")]),t._v(" 对应的格子中的数值，我们在上一步已经求得这个值是 "),a("code",[t._v("1")]),t._v("，因此我们修改数字 "),a("code",[t._v("4")]),t._v(" 对应的格子的值为 "),a("code",[t._v("1 + 1 = 2")]),t._v("：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("当然了，着同样还没有结束，我们还要判断条件 "),a("code",[t._v("4 < 2")]),t._v(" 和 "),a("code",[t._v("4 < 10")]),t._v(" 是否成立，原因我们在前面已经分析过了。条件 "),a("code",[t._v("4 < 2")]),t._v(" 不成立，所以什么都不做，但条件 "),a("code",[t._v("4 < 10")]),t._v(" 成立，我们找到数字 "),a("code",[t._v("10")]),t._v(" 对应的格子中的值："),a("code",[t._v("1")]),t._v("，将这个值加 "),a("code",[t._v("1")]),t._v(" 之后的值为 "),a("code",[t._v("2")]),t._v("，这与现在数字 "),a("code",[t._v("4")]),t._v(" 对应的格子中的值相等，所以也不需要改动。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ul",[a("li",[t._v("1、拿该格子对应的数字 "),a("code",[t._v("a")]),t._v(" 与其后面的所有格子对应的数字 "),a("code",[t._v("b")]),t._v(" 进行比较，如果条件 "),a("code",[t._v("a < b")]),t._v(" 成立，则用数字 "),a("code",[t._v("b")]),t._v(" 对应格子中的值加 "),a("code",[t._v("1")]),t._v("，并将结果填充到数字 "),a("code",[t._v("a")]),t._v(" 对应的格子中。")]),t._v(" "),a("li",[t._v("2、只有当计算出来的值大于数字 "),a("code",[t._v("a")]),t._v(" 所对应的格子中的值时，才需要更新格子中的数值。")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("有了这两条规则，我们就很容易填充剩余格子的值了，接下来我们来填充原序列中数字 "),s("code",[this._v("8")]),this._v(" 所对应的格子的值。按照上面的分析，我们需要判断四个条件：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[s("code",[this._v("8 < 4")])]),this._v(" "),s("li",[s("code",[this._v("8 < 12")])]),this._v(" "),s("li",[s("code",[this._v("8 < 2")])]),this._v(" "),s("li",[s("code",[this._v("8 < 10")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("很显然条件 "),a("code",[t._v("8 < 4")]),t._v(" 不成立，什么都不做；条件 "),a("code",[t._v("8 < 12")]),t._v(" 成立，拿出数字 "),a("code",[t._v("12")]),t._v(" 对应格子中的值："),a("code",[t._v("1")]),t._v("，为这个值再加 "),a("code",[t._v("1")]),t._v(" 得出的值为 "),a("code",[t._v("2")]),t._v("，大于数字 "),a("code",[t._v("8")]),t._v(" 对应格子的当前值，所以更新该格子的值为 "),a("code",[t._v("2")]),t._v("；条件 "),a("code",[t._v("8 < 2")]),t._v(" 也不成立，什么都不做；条件 "),a("code",[t._v("8 < 10")]),t._v(" 成立，拿出数字 "),a("code",[t._v("10")]),t._v(" 对应格子中的值 "),a("code",[t._v("1")]),t._v("，为这个值再加 "),a("code",[t._v("1")]),t._v(" 得出的值为 "),a("code",[t._v("2")]),t._v("，不大于数字 "),a("code",[t._v("8")]),t._v(" 所对应格子中的值，所以什么都不需要做，最终我们为数字 "),a("code",[t._v("8")]),t._v(" 所对应的格子填充的值是 "),a("code",[t._v("2")]),t._v("：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("现在，就剩下原序列中数字 "),s("code",[this._v("0")]),this._v(" 对应的格子的值还没有被更新了，按照之前的思路，我们需要判断的条件如下：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ul",[a("li",[a("code",[t._v("0 < 8")])]),t._v(" "),a("li",[a("code",[t._v("0 < 4")])]),t._v(" "),a("li",[a("code",[t._v("0 < 12")])]),t._v(" "),a("li",[a("code",[t._v("0 < 2")])]),t._v(" "),a("li",[a("code",[t._v("0 < 10")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("条件 "),a("code",[t._v("0 < 8")]),t._v(" 成立，拿出数字 "),a("code",[t._v("8")]),t._v(" 对应格子中的值 "),a("code",[t._v("2")]),t._v("，为这个值再加 "),a("code",[t._v("1")]),t._v(" 得出的值为 "),a("code",[t._v("3")]),t._v("，大于数字 "),a("code",[t._v("0")]),t._v(" 对应格子的当前值，所以更新该格子的值为 "),a("code",[t._v("3")]),t._v("。重复执行上面介绍的步骤，最终原序列中数字 "),a("code",[t._v("0")]),t._v(" 对应格子的值就是 "),a("code",[t._v("3")]),t._v("：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("如上图所示，现在所有格子的值都已经更新完毕，接下来我们要做的就是根据这些值，找到整个序列的最长递增子序列。那么应该如何寻找呢？很简单，实际上这些格子中的最大值就代表了整个序列的递增子序列的最大长度，上图中数字 "),s("code",[this._v("0")]),this._v(" 对应格子的值为 "),s("code",[this._v("3")]),this._v("，是最大值，因此原序列的最长递增子序列一定是以数字 "),s("code",[this._v("0")]),this._v(" 开头的：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("接着你需要在该值为 "),a("code",[t._v("3")]),t._v(" 的格子后面的所有格子中寻找数值等于 "),a("code",[t._v("2")]),t._v(" 的格子，你发现，有三个格子满足条件，分别是原序列中数字 "),a("code",[t._v("8")]),t._v("、"),a("code",[t._v("4")]),t._v("、"),a("code",[t._v("2")]),t._v(" 所对应的格子。假设你选取的是数字 "),a("code",[t._v("4")]),t._v("：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("同样的，你需要继续在数字 "),a("code",[t._v("4")]),t._v(" 对应的格子后面的所有格子中寻找到数值为 "),a("code",[t._v("1")]),t._v(" 的格子，你发现有两个格子是满足条件的，分别是原序列中数字 "),a("code",[t._v("12")]),t._v(" 和数字 "),a("code",[t._v("10")]),t._v(" 所对应的格子，我们再次随机选取一个值，假设我们选择的是数字 "),a("code",[t._v("10")]),t._v("：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("由于格子中的最小值就是数字 "),s("code",[this._v("1")]),this._v("，因此我们不需要继续寻找了。观察上图可以发现，我们选取出来的三个数字其实就是原序列的最长递增子序列："),s("code",[this._v("[ 0, 4, 10 ]")]),this._v("。当然，你可能已经发现了，答案并非只有一个，例如：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("关键在于，有三个格子的数值是 "),s("code",[this._v("2")]),this._v("，因此你可以有三种选择：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[s("code",[this._v("[ 0, 8 ]")])]),this._v(" "),s("li",[s("code",[this._v("[ 0, 4 ]")])]),this._v(" "),s("li",[s("code",[this._v("[ 0, 2 ]")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("当你选择的是 "),s("code",[this._v("[ 0, 8 ]")]),this._v(" 时，又因为数字 "),s("code",[this._v("8")]),this._v(" 对应的格子后面的格子中，有两个数值为 "),s("code",[this._v("1")]),this._v(" 的格子可供选择，所以你还有两种选择：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[s("code",[this._v("[ 0, 8, 12 ]")])]),this._v(" "),s("li",[s("code",[this._v("[ 0, 8, 10 ]")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("同样的，如果你选择的是 "),s("code",[this._v("[ 0, 4 ]")]),this._v("，也有两个选择：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[s("code",[this._v("[ 0, 4, 12 ]")])]),this._v(" "),s("li",[s("code",[this._v("[ 0, 4, 10 ]")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("但当你选择 "),s("code",[this._v("[ 0, 2 ]")]),this._v(" 时，你就只有一个选择：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[s("code",[this._v("[ 0, 2, 10 ]")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("这是因为数字 "),a("code",[t._v("2")]),t._v(" 所对应的格子后面，只有一个格子的数值是 "),a("code",[t._v("1")]),t._v("，即数字 "),a("code",[t._v("10")]),t._v(" 所对应的那个格子，因此你只有一种选择。换句话说当你选择 "),a("code",[t._v("[ 0, 2 ]")]),t._v(" 时，即使数字 "),a("code",[t._v("12")]),t._v(" 对应的格子的值也是 "),a("code",[t._v("1")]),t._v("，你也不能选择它，因为数字 "),a("code",[t._v("12")]),t._v(" 对应的格子在数字 "),a("code",[t._v("2")]),t._v(" 对应的格子之前。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("以上，就是我们求得给定序列的"),s("strong",[this._v("所有")]),this._v("最长递增子序列的算法。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"tip custom-block"},[s("p",{staticClass:"custom-block-title"},[this._v("TIP")]),this._v(" "),s("p",[this._v("上面的讲解中我们优先选择数值为 "),s("code",[this._v("3")]),this._v(" 的格子，实际上我们也可以从小往大的选择，即先选择数值为 "),s("code",[this._v("1")]),this._v(" 的格子，道理是一样。")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"不足之处"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#不足之处"}},[this._v("#")]),this._v(" 不足之处")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("实际上，我们确实花费了很大的篇幅来尽可能全面的讲解 "),a("code",[t._v("Virtual DOM")]),t._v(" 核心的 "),a("code",[t._v("Diff")]),t._v(" 算法，然而这里面仍然存在诸多不足之处，例如我们在移除一个 DOM 节点时，直接调用了 Web 平台的 "),a("code",[t._v("removeChild")]),t._v(" 方法，这是因为在以上讲解中，我们始终假设新旧 "),a("code",[t._v("children")]),t._v(" 中的 "),a("code",[t._v("VNode")]),t._v(" 都是真实 DOM 的描述，而不包含组件的描述或其他类型 "),a("code",[t._v("VNode")]),t._v(" 的描述，但实际上 "),a("code",[t._v("children")]),t._v(" 中 "),a("code",[t._v("VNode")]),t._v(" 的类型可以是任意的，因此我们不能简单的通过 Web 平台的 "),a("code",[t._v("removeChild")]),t._v(" 方法进行 DOM 移除操作。这时我们需要封装一个专用函数："),a("code",[t._v("removeVNode")]),t._v("，该函数专门负责移除一个 "),a("code",[t._v("VNode")]),t._v("，它会判断该 "),a("code",[t._v("VNode")]),t._v(" 的类型，并采用合适的方式将其所渲染的真实 DOM 移除。大家思考一下，如果将要被移除的 "),a("code",[t._v("VNode")]),t._v(" 是一个组件的描述，那是否还应该在移除之前或之后分别调用 "),a("code",[t._v("beforeUnmount")]),t._v(" 以及 "),a("code",[t._v("unmounted")]),t._v(" 等生命周期钩子函数呢？答案当然是肯定的。不过，本节讲解的内容虽然存在不足，但至少思路是完全正确的，在此基础上，你可以发挥自己的想象或者结合真正 "),a("code",[t._v("Vue3")]),t._v(" 的源码去进一步的提升。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"references"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#references"}},[this._v("#")]),this._v(" References")])}],e=a(0),r=Object(e.a)({},(function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"content"},[t._m(0),t._v(" "),t._m(1),t._v(" "),t._m(2),t._v(" "),t._m(3),t._v(" "),t._m(4),t._v(" "),t._m(5),t._m(6),t._v(" "),t._m(7),t._m(8),t._v(" "),t._m(9),n("p",[t._v("接着由于数据变化导致了列表的顺序发生了变化，新的列表顺序如下：")]),t._v(" "),t._m(10),t._m(11),t._v(" "),n("img",{attrs:{src:a(177),width:"400"}}),t._v(" "),t._m(12),t._v(" "),t._m(13),t._v(" "),n("img",{attrs:{src:a(178),width:"400"}}),t._v(" "),n("p",[t._v("用代码实现起来也非常简单，如下高亮代码所示：")]),t._v(" "),t._m(14),t._m(15),t._v(" "),n("img",{attrs:{src:a(179),width:"400"}}),t._v(" "),t._m(16),t._v(" "),n("img",{attrs:{src:a(180),width:"400"}}),t._v(" "),t._m(17),t._v(" "),t._m(18),n("div",{staticClass:"tip custom-block"},[n("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),n("p",[t._v("完整代码&在线体验地址："),n("a",{attrs:{href:"https://codesandbox.io/s/qqxxlxzwm6",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://codesandbox.io/s/qqxxlxzwm6"),n("OutboundLink")],1)])]),t._v(" "),t._m(19),t._v(" "),t._m(20),t._v(" "),t._m(21),t._v(" "),t._m(22),t._v(" "),t._m(23),t._m(24),t._v(" "),t._m(25),t._m(26),t._v(" "),t._m(27),t._m(28),t._v(" "),t._m(29),t._v(" "),n("img",{attrs:{src:a(181),width:"400"}}),t._v(" "),t._m(30),t._v(" "),t._m(31),t._v(" "),t._m(32),t._m(33),t._v(" "),t._m(34),t._m(35),t._v(" "),t._m(36),t._v(" "),t._m(37),t._m(38),t._v(" "),n("img",{attrs:{src:a(182),width:"400"}}),t._v(" "),t._m(39),t._v(" "),t._m(40),t._m(41),t._v(" "),t._m(42),t._v(" "),t._m(43),t._v(" "),n("img",{attrs:{src:a(183),width:"400"}}),t._v(" "),t._m(44),t._v(" "),t._m(45),t._v(" "),t._m(46),t._v(" "),n("img",{attrs:{src:a(165),width:"400"}}),t._v(" "),n("p",[t._v("我们同样执行一下本节介绍的算法，看看会发生什么：")]),t._v(" "),t._m(47),t._v(" "),t._m(48),t._v(" "),t._m(49),t._v(" "),t._m(50),t._v(" "),t._m(51),t._v(" "),t._m(52),t._v(" "),t._m(53),t._m(54),t._v(" "),t._m(55),t._v(" "),n("p",[t._v("现在我们已经有办法找到需要移动的节点了，接下来要解决的问题就是：应该如何移动这些节点？为了弄明白这个问题，我们还是先来看下图：")]),t._v(" "),n("img",{attrs:{src:a(165),width:"400"}}),t._v(" "),t._m(56),t._v(" "),n("img",{attrs:{src:a(184),width:"400"}}),t._v(" "),t._m(57),t._v(" "),t._m(58),t._m(59),t._v(" "),t._m(60),t._v(" "),t._m(61),t._m(62),t._v(" "),n("img",{attrs:{src:a(185),width:"400"}}),t._v(" "),t._m(63),t._v(" "),n("div",{staticClass:"tip custom-block"},[n("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),n("p",[t._v("完整代码&在线体验地址："),n("a",{attrs:{href:"https://codesandbox.io/s/4x6qo5w34w",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://codesandbox.io/s/4x6qo5w34w"),n("OutboundLink")],1)])]),t._v(" "),t._m(64),t._v(" "),t._m(65),t._v(" "),n("img",{attrs:{src:a(168),width:"400"}}),t._v(" "),t._m(66),t._v(" "),t._m(67),t._v(" "),t._m(68),t._m(69),t._v(" "),t._m(70),t._m(71),t._v(" "),n("img",{attrs:{src:a(168),width:"400"}}),t._v(" "),t._m(72),t._v(" "),t._m(73),t._m(74),t._v(" "),t._m(75),t._m(76),t._v(" "),n("div",{staticClass:"tip custom-block"},[n("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),n("p",[t._v("完整代码&在线体验地址："),n("a",{attrs:{href:"https://codesandbox.io/s/54215km3vn",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://codesandbox.io/s/54215km3vn"),n("OutboundLink")],1)])]),t._v(" "),t._m(77),t._v(" "),t._m(78),t._v(" "),n("p",[t._v("除了要将全新的节点添加到容器元素之外，我们还应该把已经不存在了的节点移除，如下图所示：")]),t._v(" "),n("img",{attrs:{src:a(186),width:"400"}}),t._v(" "),t._m(79),t._v(" "),t._m(80),n("div",{staticClass:"tip custom-block"},[n("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),n("p",[t._v("完整代码&在线体验地址："),n("a",{attrs:{href:"https://codesandbox.io/s/844lp3mq72",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://codesandbox.io/s/844lp3mq72"),n("OutboundLink")],1)])]),t._v(" "),t._m(81),t._v(" "),t._m(82),t._v(" "),t._m(83),t._v(" "),t._m(84),t._v(" "),n("img",{attrs:{src:a(187),width:"400"}}),t._v(" "),t._m(85),t._v(" "),n("img",{attrs:{src:a(169),width:"400"}}),t._v(" "),t._m(86),t._v(" "),t._m(87),t._v(" "),n("img",{attrs:{src:a(188),width:"400"}}),t._v(" "),t._m(88),t._v(" "),t._m(89),t._m(90),t._v(" "),t._m(91),n("p",[t._v("有了这些基础信息，我们就可以开始执行双端比较了，在一次比较过程中，最多需要进行四次比较：")]),t._v(" "),t._m(92),t._v(" "),t._m(93),t._v(" "),n("img",{attrs:{src:a(189),width:"400"}}),t._v(" "),n("p",[t._v("如下代码是该比对过程的实现：")]),t._v(" "),t._m(94),t._m(95),t._v(" "),t._m(96),t._v(" "),t._m(97),t._v(" "),t._m(98),n("p",[t._v("这一步更新完成之后，新的索引关系可以用下图来表示：")]),t._v(" "),n("img",{attrs:{src:a(190),width:"400"}}),t._v(" "),t._m(99),t._v(" "),n("img",{attrs:{src:a(191),width:"400"}}),t._v(" "),n("p",[t._v("这样，一次比对就完成了，并且位置索引已经更新，我们需要进行下轮的比对，那么什么时候比对才能结束呢？如下代码所示：")]),t._v(" "),t._m(100),t._m(101),t._v(" "),n("p",[t._v("还是观察上图，我们继续进行第二轮的比对：")]),t._v(" "),t._m(102),t._v(" "),t._m(103),n("p",[t._v("由于没有进行移动操作，所以在这一轮比对中，真实 DOM 的顺序没有发生变化，下图表示了在这一轮比对结束之后的状况：")]),t._v(" "),n("img",{attrs:{src:a(192),width:"400"}}),t._v(" "),n("p",[t._v("由于此时循环条件成立，所以会继续下一轮的比较：")]),t._v(" "),t._m(104),t._v(" "),t._m(105),t._v(" "),t._m(106),t._m(107),t._v(" "),n("img",{attrs:{src:a(193),width:"400"}}),t._v(" "),t._m(108),t._v(" "),t._m(109),t._v(" "),t._m(110),t._v(" "),t._m(111),t._m(112),t._v(" "),n("img",{attrs:{src:a(194),width:"400"}}),t._v(" "),t._m(113),t._v(" "),n("div",{staticClass:"tip custom-block"},[n("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),n("p",[t._v("完整代码&在线体验地址："),n("a",{attrs:{href:"https://codesandbox.io/s/xvmqn58jqw",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://codesandbox.io/s/xvmqn58jqw"),n("OutboundLink")],1)])]),t._v(" "),t._m(114),t._v(" "),n("p",[t._v("理解了双端比较的原理之后，我们来看一下双端比较所带来的优势，还是拿之前的例子，如下：")]),t._v(" "),n("img",{attrs:{src:a(165),width:"400"}}),t._v(" "),t._m(115),t._v(" "),n("img",{attrs:{src:a(169),width:"400"}}),t._v(" "),n("p",[t._v("接下来我们采用双端比较的方式，来完成上例的更新，看看会有什么不同，如下图所示：")]),t._v(" "),n("img",{attrs:{src:a(195),width:"400"}}),t._v(" "),n("p",[t._v("我们按照双端比较的思路开始第一轮比较，按步骤执行：")]),t._v(" "),t._m(116),t._v(" "),t._m(117),t._v(" "),n("img",{attrs:{src:a(196),width:"400"}}),t._v(" "),t._m(118),t._v(" "),t._m(119),t._v(" "),n("p",[t._v("在之前的讲解中，我们所采用的是较理想的例子，换句话说，在每一轮的比对过程中，总会满足四个步骤中的一步，但实际上大多数情况下并不会这么理想，如下图所示：")]),t._v(" "),n("img",{attrs:{src:a(197),width:"400"}}),t._v(" "),t._m(120),t._v(" "),t._m(121),t._m(122),t._v(" "),n("img",{attrs:{src:a(198),width:"400"}}),t._v(" "),n("p",[t._v("可以用如下高亮的代码来实现这个过程：")]),t._v(" "),t._m(123),t._m(124),t._v(" "),n("img",{attrs:{src:a(199),width:"400"}}),t._v(" "),t._m(125),t._v(" "),t._m(126),t._m(127),t._v(" "),n("div",{staticClass:"tip custom-block"},[n("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),n("p",[t._v("完整代码&在线体验地址："),n("a",{attrs:{href:"https://codesandbox.io/s/vjp265qxnl",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://codesandbox.io/s/vjp265qxnl"),n("OutboundLink")],1)])]),t._v(" "),t._m(128),t._v(" "),t._m(129),t._v(" "),n("img",{attrs:{src:a(200),width:"400"}}),t._v(" "),t._m(130),t._v(" "),t._m(131),t._m(132),t._v(" "),n("div",{staticClass:"tip custom-block"},[n("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),n("p",[t._v("完整代码&在线体验地址："),n("a",{attrs:{href:"https://codesandbox.io/s/n7y46ojv4m",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://codesandbox.io/s/n7y46ojv4m"),n("OutboundLink")],1)])]),t._v(" "),t._m(133),t._v(" "),n("img",{attrs:{src:a(201),width:"400"}}),t._v(" "),t._m(134),t._v(" "),t._m(135),t._v(" "),t._m(136),t._v(" "),n("img",{attrs:{src:a(202),width:"400"}}),t._v(" "),n("p",[t._v("接着，开始下一轮的比较，重新从第一步开始。结果和上一轮相似，同样在第二步中找到可复用的节点，所以在在这一轮的更新完成之后，其状态如下图所示：")]),t._v(" "),n("img",{attrs:{src:a(203),width:"400"}}),t._v(" "),t._m(137),t._v(" "),n("img",{attrs:{src:a(204),width:"400"}}),t._v(" "),t._m(138),t._v(" "),t._m(139),t._m(140),t._v(" "),n("div",{staticClass:"tip custom-block"},[n("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),n("p",[t._v("完整代码&在线体验地址："),n("a",{attrs:{href:"https://codesandbox.io/s/ryryx6n42m",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://codesandbox.io/s/ryryx6n42m"),n("OutboundLink")],1)])]),t._v(" "),t._m(141),t._v(" "),n("p",[t._v("对于双端比较，最后一个需要考虑的情况是：当有元素被移除时的情况，如下图所示：")]),t._v(" "),n("img",{attrs:{src:a(205),width:"400"}}),t._v(" "),t._m(142),t._v(" "),t._m(143),t._v(" "),t._m(144),t._v(" "),n("img",{attrs:{src:a(206),width:"400"}}),t._v(" "),t._m(145),t._v(" "),t._m(146),t._v(" "),t._m(147),t._v(" "),n("img",{attrs:{src:a(207),width:"400"}}),t._v(" "),t._m(148),t._v(" "),t._m(149),t._m(150),t._v(" "),n("div",{staticClass:"tip custom-block"},[n("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),n("p",[t._v("完整代码&在线体验地址："),n("a",{attrs:{href:"https://codesandbox.io/s/9jnvjj1mko",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://codesandbox.io/s/9jnvjj1mko"),n("OutboundLink")],1)])]),t._v(" "),n("p",[t._v("以上就是相对完整的双端比较算法的实现，这是 "),n("code",[t._v("Vue2")]),t._v(" 所采用的算法，借鉴于开源项目："),n("a",{attrs:{href:"https://github.com/snabbdom/snabbdom",target:"_blank",rel:"noopener noreferrer"}},[t._v("snabbdom"),n("OutboundLink")],1),t._v("，但最早采用双端比较算法的库是 "),n("a",{attrs:{href:"https://github.com/joelrich/citojs",target:"_blank",rel:"noopener noreferrer"}},[t._v("citojs"),n("OutboundLink")],1),t._v("。")]),t._v(" "),t._m(151),t._v(" "),n("p",[t._v("在 "),n("code",[t._v("Vue3")]),t._v(" 中将采用另外一种核心 "),n("code",[t._v("Diff")]),t._v(" 算法，它借鉴于 "),n("a",{attrs:{href:"https://github.com/localvoid/ivi",target:"_blank",rel:"noopener noreferrer"}},[t._v("ivi"),n("OutboundLink")],1),t._v(" 和 "),n("a",{attrs:{href:"https://github.com/infernojs/inferno",target:"_blank",rel:"noopener noreferrer"}},[t._v("inferno"),n("OutboundLink")],1),t._v("，看下图：")]),t._v(" "),n("img",{attrs:{src:a(208),width:"200"}}),t._v(" "),n("p",[t._v("这张图来自 "),n("a",{attrs:{href:"https://krausest.github.io/js-framework-benchmark/current.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("js-framework-benchmark"),n("OutboundLink")],1),t._v("，从上图中可以看到，在 DOM 操作的各个方面，"),n("code",[t._v("ivi")]),t._v(" 和 "),n("code",[t._v("inferno")]),t._v(" 都要稍优于 "),n("code",[t._v("vue2")]),t._v(" 的双端比较。但总体上的性能表现并不是单纯的由核心 "),n("code",[t._v("Diff")]),t._v(" 算法来决定的，我们在前面章节的讲解中已经了解到的了一些优化手段，例如"),t._m(152),t._v("，在这个基础之上再配合核心的 "),n("code",[t._v("Diff")]),t._v(" 算法，才使得性能上产生一定的优势，这也是 "),n("code",[t._v("Vue3")]),t._v(" 接纳这种算法的原因之一，本节我们就着重讨论该核心 "),n("code",[t._v("Diff")]),t._v(" 算法的实现原理。")]),t._v(" "),t._m(153),t._v(" "),t._m(154),t._v(" "),t._m(155),t._m(156),t._v(" "),t._m(157),n("p",[t._v("我们通过肉眼可以很容易的发现，这两段文本头部和尾部分别有一段相同的文本：")]),t._v(" "),n("img",{attrs:{src:a(209),width:"300"}}),t._v(" "),t._m(158),t._v(" "),t._m(159),n("p",[t._v("这么做的好处是：在某些情况下，我们能够轻松的判断出单独的文本插入和删除，例如下面的例子：")]),t._v(" "),t._m(160),n("p",[t._v("这两个文本在经过去除相同的前缀和后缀之后将变成：")]),t._v(" "),t._m(161),t._m(162),t._v(" "),t._m(163),n("p",[t._v("则经过预处理之后将变成：")]),t._v(" "),t._m(164),n("p",[t._v("这代表文本被删除。")]),t._v(" "),t._m(165),t._v(" "),n("img",{attrs:{src:a(210),width:"400"}}),t._v(" "),t._m(166),t._v(" "),t._m(167),n("p",[t._v("可以用下图描述这一步操作完成之后的状态：")]),t._v(" "),n("img",{attrs:{src:a(211),width:"400"}}),t._v(" "),t._m(168),t._v(" "),t._m(169),n("p",[t._v("可以用下图来表示这一步更新完成之后的状态：")]),t._v(" "),n("img",{attrs:{src:a(212),width:"400"}}),t._v(" "),t._m(170),t._v(" "),t._m(171),t._m(172),t._v(" "),n("img",{attrs:{src:a(213),width:"400"}}),t._v(" "),t._m(173),t._v(" "),t._m(174),n("p",[t._v("再来看如下案例：")]),t._v(" "),n("img",{attrs:{src:a(214),width:"400"}}),t._v(" "),n("p",[t._v("在这个案例中，当“去掉”相同的前缀和后缀之后，三个索引的值为：")]),t._v(" "),t._m(175),t._m(176),t._v(" "),n("img",{attrs:{src:a(215),width:"400"}}),t._v(" "),n("p",[t._v("代码实现起来也很简单，如下高亮代码所示：")]),t._v(" "),t._m(177),n("p",[t._v("现在我们来观察一下总体的代码结构：")]),t._v(" "),t._m(178),t._m(179),t._v(" "),t._m(180),t._m(181),t._v(" "),n("div",{staticClass:"tip custom-block"},[n("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),n("p",[t._v("完整代码&在线体验地址："),n("a",{attrs:{href:"https://codesandbox.io/s/5yo3z824vp",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://codesandbox.io/s/5yo3z824vp"),n("OutboundLink")],1)])]),t._v(" "),t._m(182),t._v(" "),t._m(183),t._v(" "),n("img",{attrs:{src:a(216),width:"500"}}),t._v(" "),t._m(184),t._v(" "),n("p",[t._v("为了让事情更直观我们把该案例在应用预处理之后的状态用下图描述出来：")]),t._v(" "),n("img",{attrs:{src:a(217),width:"500"}}),t._v(" "),t._m(185),t._v(" "),t._m(186),t._m(187),t._v(" "),t._m(188),t._m(189),t._v(" "),n("img",{attrs:{src:a(218),width:"500"}}),t._v(" "),t._m(190),t._v(" "),t._m(191),t._m(192),t._v(" "),n("img",{attrs:{src:a(219),width:"500"}}),t._v(" "),t._m(193),t._v(" "),t._m(194),t._m(195),t._v(" "),t._m(196),t._m(197),t._v(" "),t._m(198),t._v(" "),n("img",{attrs:{src:a(170),width:"500"}}),t._v(" "),t._m(199),t._v(" "),t._m(200),t._m(201),t._v(" "),t._m(202),t._v(" "),t._m(203),t._m(204),t._v(" "),t._m(205),t._m(206),t._v(" "),n("div",{staticClass:"tip custom-block"},[n("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),n("p",[t._v("完整代码&在线体验地址："),n("a",{attrs:{href:"https://codesandbox.io/s/03o5plkv40",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://codesandbox.io/s/03o5plkv40"),n("OutboundLink")],1)])]),t._v(" "),t._m(207),t._v(" "),t._m(208),t._v(" "),n("img",{attrs:{src:a(170),width:"500"}}),t._v(" "),t._m(209),t._v(" "),t._m(210),t._m(211),t._v(" "),t._m(212),t._m(213),t._v(" "),t._m(214),t._v(" "),t._m(215),t._v(" "),n("img",{attrs:{src:a(220),width:"500"}}),t._v(" "),t._m(216),t._v(" "),n("img",{attrs:{src:a(221),width:"500"}}),t._v(" "),t._m(217),t._v(" "),t._m(218),t._m(219),t._v(" "),t._m(220),t._m(221),t._v(" "),n("img",{attrs:{src:a(222),width:"500"}}),t._v(" "),t._m(222),t._v(" "),t._m(223),t._m(224),t._v(" "),n("img",{attrs:{src:a(223),width:"500"}}),t._v(" "),t._m(225),t._v(" "),n("img",{attrs:{src:a(224),width:"500"}}),t._v(" "),t._m(226),t._v(" "),n("div",{staticClass:"tip custom-block"},[n("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),n("p",[t._v("完整代码&在线体验地址："),n("a",{attrs:{href:"https://codesandbox.io/s/4lrqpv0jm9",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://codesandbox.io/s/4lrqpv0jm9"),n("OutboundLink")],1)])]),t._v(" "),t._m(227),t._v(" "),t._m(228),t._v(" "),n("p",[t._v("设给定的序列如下：")]),t._v(" "),t._m(229),t._m(230),t._v(" "),t._m(231),t._v(" "),n("p",[t._v("为了不过于抽象，我们可以画出如下图所示的格子：")]),t._v(" "),n("img",{attrs:{src:a(225),width:"300"}}),t._v(" "),t._m(232),t._v(" "),n("img",{attrs:{src:a(226),width:"300"}}),t._v(" "),t._m(233),t._v(" "),n("img",{attrs:{src:a(227),width:"300"}}),t._v(" "),t._m(234),t._v(" "),t._m(235),t._v(" "),n("img",{attrs:{src:a(228),width:"300"}}),t._v(" "),t._m(236),t._v(" "),t._m(237),t._v(" "),n("img",{attrs:{src:a(229),width:"300"}}),t._v(" "),t._m(238),t._v(" "),n("p",[t._v("到现在为止，不知道大家发现什么规律没有？如何计算一个格子中的值呢？实际很简单，规则是：")]),t._v(" "),t._m(239),t._v(" "),t._m(240),t._v(" "),t._m(241),t._v(" "),t._m(242),t._v(" "),n("img",{attrs:{src:a(230),width:"300"}}),t._v(" "),t._m(243),t._v(" "),t._m(244),t._v(" "),t._m(245),t._v(" "),n("img",{attrs:{src:a(231),width:"300"}}),t._v(" "),t._m(246),t._v(" "),n("img",{attrs:{src:a(232),width:"300"}}),t._v(" "),t._m(247),t._v(" "),n("img",{attrs:{src:a(233),width:"300"}}),t._v(" "),t._m(248),t._v(" "),n("img",{attrs:{src:a(234),width:"300"}}),t._v(" "),t._m(249),t._v(" "),n("img",{attrs:{src:a(235),width:"300"}}),t._v(" "),t._m(250),t._v(" "),t._m(251),t._v(" "),t._m(252),t._v(" "),t._m(253),t._v(" "),t._m(254),t._v(" "),t._m(255),t._v(" "),t._m(256),t._v(" "),t._m(257),t._v(" "),t._m(258),t._v(" "),t._m(259),t._v(" "),t._m(260),t._v(" "),n("div",{staticClass:"tip custom-block"},[n("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),n("p",[t._v("完整代码&在线体验地址："),n("a",{attrs:{href:"https://codesandbox.io/s/32wjmo7omq",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://codesandbox.io/s/32wjmo7omq"),n("OutboundLink")],1)])]),t._v(" "),t._m(261),t._v(" "),t._m(262),t._v(" "),t._m(263),t._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"https://neil.fraser.name/writing/diff/",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://neil.fraser.name/writing/diff/"),n("OutboundLink")],1)])])])}),n,!1,null,null,null);s.default=r.exports}])]);